@page
@model TravelOrganizationWebApp.Pages.Destinations.CreateModel
@{
    ViewData["Title"] = "Create Destination";
}

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h2 class="mb-0">@ViewData["Title"]</h2>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(TempData["ErrorMessage"]?.ToString()))
                    {
                        <div class="alert alert-danger" role="alert">
                            @TempData["ErrorMessage"]
                        </div>
                    }

                    <form method="post" class="needs-validation" novalidate>
                        <div class="mb-3">
                            <label asp-for="Destination.Name" class="form-label">Destination Name</label>
                            <input asp-for="Destination.Name" class="form-control" required id="destinationName" />
                            <span asp-validation-for="Destination.Name" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Destination.Country" class="form-label">Country</label>
                            <input asp-for="Destination.Country" class="form-control" required id="destinationCountry" />
                            <span asp-validation-for="Destination.Country" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Destination.City" class="form-label">City</label>
                            <input asp-for="Destination.City" class="form-control" required id="destinationCity" />
                            <span asp-validation-for="Destination.City" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Destination.Description" class="form-label">Description</label>
                            <textarea asp-for="Destination.Description" class="form-control" rows="4"></textarea>
                            <span asp-validation-for="Destination.Description" class="text-danger"></span>
                            <div class="form-text">Optional: Add a description of the destination</div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Destination Image</label>
                            <input type="hidden" asp-for="Destination.ImageUrl" id="imageUrlInput" />
                            <div class="row">
                                <div class="col-md-8">
                                    <div class="image-preview-container mb-2" style="height: 200px; overflow: hidden; background-color: #f8f9fa; display: flex; align-items: center; justify-content: center;">
                                        <img id="imagePreview" src="" alt="Destination Image Preview" style="max-width: 100%; max-height: 200px; display: none;">
                                        <div id="noImagePlaceholder">
                                            <i class="fas fa-image text-muted" style="font-size: 3rem;"></i>
                                            <p class="text-muted mb-0">No image selected</p>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <button type="button" id="loadImageBtn" class="btn btn-outline-primary mb-2 w-100">
                                        <i class="fas fa-image me-1"></i> Load Image
                                    </button>
                                    <button type="button" id="refreshImageBtn" class="btn btn-outline-secondary mb-2 w-100" disabled>
                                        <i class="fas fa-sync-alt me-1"></i> Try Another
                                    </button>
                                </div>
                            </div>
                        </div>

                        <div class="d-flex justify-content-between">
                            <a asp-page="./Index" class="btn btn-secondary">Cancel</a>
                            <button type="submit" class="btn btn-primary">Create Destination</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        // Enable Bootstrap form validation
        (function () {
            'use strict'
            var forms = document.querySelectorAll('.needs-validation')
            Array.prototype.slice.call(forms).forEach(function (form) {
                form.addEventListener('submit', function (event) {
                    if (!form.checkValidity()) {
                        event.preventDefault()
                        event.stopPropagation()
                    }
                    form.classList.add('was-validated')
                }, false)
            })
        })()

        // Image handling with Unsplash
        document.addEventListener('DOMContentLoaded', function () {
            const loadImageBtn = document.getElementById('loadImageBtn');
            const refreshImageBtn = document.getElementById('refreshImageBtn');
            const imagePreview = document.getElementById('imagePreview');
            const imageUrlInput = document.getElementById('imageUrlInput');
            const noImagePlaceholder = document.getElementById('noImagePlaceholder');
            const nameInput = document.getElementById('destinationName');
            const cityInput = document.getElementById('destinationCity');
            const countryInput = document.getElementById('destinationCountry');

            // Function to get image from Unsplash
            async function getUnsplashImage() {
                try {
                    // Get query from inputs
                    const city = cityInput.value.trim();
                    const country = countryInput.value.trim();
                    
                    if (!city && !country) {
                        alert("Please enter at least a city or country name first.");
                        return;
                    }
                    
                    const query = `${city} ${country} travel`.trim();
                    
                    // Fetch image from backend
                    const response = await fetch(`/api/unsplash/random?query=${encodeURIComponent(query)}`);
                    
                    if (!response.ok) {
                        throw new Error(`Error: ${response.status}`);
                    }
                    
                    const data = await response.json();
                    
                    // Display the image
                    imagePreview.src = data.imageUrl;
                    imagePreview.style.display = 'block';
                    imageUrlInput.value = data.imageUrl;
                    noImagePlaceholder.style.display = 'none';
                    refreshImageBtn.disabled = false;
                } catch (error) {
                    console.error('Error fetching image:', error);
                    alert('Failed to load image. Please try again.');
                }
            }

            // Load image button
            loadImageBtn.addEventListener('click', getUnsplashImage);
            
            // Refresh image button
            refreshImageBtn.addEventListener('click', getUnsplashImage);
        });
    </script>
} 