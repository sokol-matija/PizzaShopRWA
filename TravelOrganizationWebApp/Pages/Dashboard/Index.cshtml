@page
@model PizzaShopWebApp.Pages.Dashboard.DashboardIndexModel
@{
    ViewData["Title"] = "Dashboard";
    Layout = "_DashboardLayout";
}

<style>
    :root {
        --primary: #EA7C69;
        --primary-hover: #f68d7a;
        --primary-light: rgba(234, 124, 105, 0.2);
    }

    /* Main content area */
    .main-content {
        background: linear-gradient(135deg, var(--dark-bg-color, #252836) 0%, #1F1D2B 100%);
        min-height: 100vh;
        position: relative;
        width: 100%;
    }

    /* Dashboard header */
    .dashboard-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 32px;
        background: rgba(255, 255, 255, 0.03);
        padding: 24px;
        border-radius: 16px;
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.05);
    }

    .header-content h1 {
        font-size: 32px;
        font-weight: 600;
        color: var(--text-color, #fff);
        margin: 0;
        background: linear-gradient(45deg, #fff, #EA7C69);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
    }

    .header-content .date {
        color: var(--text-muted, #ABBBC2);
        margin: 6px 0 0 0;
        font-size: 14px;
    }

    .header-actions {
        display: flex;
        gap: 20px;
        align-items: center;
    }

    /* Refresh button styling */
    .refresh-btn {
        width: 48px;
        height: 48px;
        border-radius: 12px;
        background: rgba(255, 255, 255, 0.05);
        border: 1px solid rgba(255, 255, 255, 0.1);
        color: var(--text-muted, #ABBBC2);
        font-size: 20px;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .refresh-btn:hover {
        background: rgba(255, 255, 255, 0.08);
        color: #fff;
        transform: translateY(-2px);
    }

    .refresh-btn.loading {
        pointer-events: none;
    }

    .refresh-btn i {
        transition: transform 0.5s ease;
    }

    .refresh-btn.loading i {
        animation: spin 1.2s linear infinite;
    }

    @@keyframes spin {
        from { transform: rotate(0deg); }
        to { transform: rotate(360deg); }
    }

    /* Dashboard notification */
    .dashboard-notification {
        position: fixed;
        bottom: 30px;
        right: 30px;
        background: rgba(46, 204, 113, 0.1);
        border: 1px solid rgba(46, 204, 113, 0.3);
        color: #2ECC71;
        padding: 16px 20px;
        border-radius: 12px;
        display: flex;
        align-items: center;
        gap: 12px;
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
        z-index: 1000;
        transform: translateY(100px);
        opacity: 0;
        transition: all 0.5s cubic-bezier(0.175, 0.885, 0.32, 1.275);
    }

    .dashboard-notification.show {
        transform: translateY(0);
        opacity: 1;
    }

    /* Checkmark animation */
    .checkmark-circle {
        stroke-dasharray: 166;
        stroke-dashoffset: 166;
        stroke-width: 2;
        stroke-miterlimit: 10;
        stroke: #2ECC71;
        fill: none;
        animation: stroke 0.6s cubic-bezier(0.65, 0, 0.45, 1) forwards;
    }

    .checkmark {
        width: 28px;
        height: 28px;
        border-radius: 50%;
        display: block;
        stroke-width: 2;
        stroke: #2ECC71;
        stroke-miterlimit: 10;
        box-shadow: inset 0px 0px 0px #2ECC71;
        animation: fill .4s ease-in-out .4s forwards, scale .3s ease-in-out .9s both;
    }

    .checkmark-check {
        transform-origin: 50% 50%;
        stroke-dasharray: 48;
        stroke-dashoffset: 48;
        animation: stroke 0.3s cubic-bezier(0.65, 0, 0.45, 1) 0.8s forwards, blink 1s ease-in-out 1.2s 2;
    }

    @@keyframes stroke {
        100% {
            stroke-dashoffset: 0;
        }
    }

    @@keyframes scale {
        0%, 100% {
            transform: none;
        }
        50% {
            transform: scale3d(1.1, 1.1, 1);
        }
    }

    @@keyframes fill {
        100% {
            box-shadow: inset 0px 0px 0px 30px rgba(46, 204, 113, 0.2);
        }
    }

    @@keyframes blink {
        0%, 100% {
            opacity: 1;
        }
        50% {
            opacity: 0.5;
        }
    }

    /* Date filter styles */
    .date-filter-bar {
        display: flex;
        background-color: var(--dark-bg-2);
        border-radius: 12px;
        margin-bottom: 24px;
        overflow: hidden;
        background: rgba(255, 255, 255, 0.03);
        border: 1px solid rgba(255, 255, 255, 0.05);
    }

    .date-filter-option {
        padding: 12px 20px;
        font-weight: 500;
        color: #ABBBC2;
        cursor: pointer;
        transition: all 0.3s ease;
        flex: 1;
        text-align: center;
    }

    .date-filter-option:hover {
        background-color: rgba(234, 124, 105, 0.1);
        color: white;
        transform: translateY(-2px);
    }

    .date-filter-option.active {
        background: linear-gradient(45deg, var(--accent-color, #EA7C69), #e96c57);
        color: white;
        box-shadow: 0 4px 12px rgba(234, 124, 105, 0.4);
    }

    /* Dashboard layout */
    .dashboard-row {
        margin-bottom: 25px;
        width: 100%;
        animation: fadeInUp 0.6s ease;
    }

    /* Improving popular items styling */
    .popular-items-grid {
        display: grid;
        grid-template-columns: repeat(5, 1fr);
        gap: 20px;
        margin-top: 15px;
    }
    
    @@media (max-width: 1400px) {
        .popular-items-grid {
            grid-template-columns: repeat(4, 1fr);
        }
    }
    
    @@media (max-width: 1100px) {
        .popular-items-grid {
            grid-template-columns: repeat(3, 1fr);
        }
    }
    
    @@media (max-width: 900px) {
        .popular-items-grid {
            grid-template-columns: repeat(2, 1fr);
        }
    }
    
    @@media (max-width: 600px) {
        .popular-items-grid {
            grid-template-columns: 1fr;
        }
    }
    
    .popular-item {
        display: flex;
        flex-direction: column;
        background: rgba(255, 255, 255, 0.03);
        border-radius: 20px;
        overflow: hidden;
        height: 100%;
        min-height: 250px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
        transition: all 0.3s ease;
        border: 1px solid rgba(255, 255, 255, 0.05);
        backdrop-filter: blur(10px);
        opacity: 0;
        transform: translateY(20px);
    }
    
    .popular-item.card-loaded {
        opacity: 1;
        transform: translateY(0);
    }
    
    .popular-item:hover {
        transform: translateY(-5px) !important;
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.2);
        border-color: rgba(234, 124, 105, 0.5);
    }
    
    .popular-item-image {
        height: 140px;
        overflow: hidden;
        position: relative;
    }
    
    .popular-item-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.3s ease;
    }
    
    .popular-item:hover .popular-item-image img {
        transform: scale(1.05);
    }
    
    .popular-item-info {
        padding: 15px;
        display: flex;
        flex-direction: column;
        flex-grow: 1;
    }
    
    .popular-item-info h4 {
        margin: 0 0 8px 0;
        color: white;
        font-size: 1.1rem;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }
    
    .popular-item-info p {
        margin: 0 0 10px 0;
        color: var(--text-light);
        font-size: 0.85rem;
        flex-grow: 1;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }
    
    .popular-item-stats {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 8px;
    }
    
    .popular-item-info .price {
        color: var(--primary);
        font-weight: bold;
        font-size: 1.1rem;
    }
    
    .popular-item-info .category {
        color: var(--text-light);
        font-size: 0.8rem;
        padding: 4px 8px;
        background-color: rgba(255, 255, 255, 0.05);
        border-radius: 12px;
    }
    
    .item-order-count {
        position: absolute;
        top: 10px;
        right: 10px;
        background: linear-gradient(135deg, #FF9F69, #FF4B4B);
        color: white;
        font-weight: bold;
        padding: 4px 10px;
        border-radius: 20px;
        font-size: 0.8rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    }

    /* Recent orders table improvements */
    .orders-table-container {
        overflow-x: auto;
        margin-top: 15px;
        border-radius: 16px;
    }
    
    .orders-table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0;
    }
    
    .orders-table th {
        padding: 15px;
        text-align: left;
        background-color: rgba(0,0,0,0.2);
        color: #ABBBC2;
        font-weight: 500;
    }
    
    .orders-table th:first-child {
        border-top-left-radius: 12px;
    }
    
    .orders-table th:last-child {
        border-top-right-radius: 12px;
    }
    
    .orders-table td {
        padding: 15px;
        background-color: rgba(255, 255, 255, 0.03);
        border-top: 1px solid rgba(255,255,255,0.05);
    }
    
    .orders-table tr:last-child td:first-child {
        border-bottom-left-radius: 12px;
    }
    
    .orders-table tr:last-child td:last-child {
        border-bottom-right-radius: 12px;
    }
    
    .orders-table tr:hover td {
        background-color: rgba(255,255,255,0.05);
    }
    
    .more-items {
        background-color: rgba(234, 124, 105, 0.1);
        color: var(--accent-color);
        padding: 2px 6px;
        border-radius: 4px;
        font-size: 0.75rem;
        margin-left: 5px;
    }

    /* Status badges styling */
    .status-badge {
        display: inline-block;
        padding: 6px 12px;
        border-radius: 8px;
        font-weight: 500;
        font-size: 0.75rem;
        text-align: center;
        min-width: 80px;
    }

    .status-badge.pending {
        background-color: rgba(255, 170, 0, 0.1);
        color: #FFAA00;
    }

    .status-badge.preparing {
        background-color: rgba(65, 137, 230, 0.1);
        color: #4189E6;
    }

    .status-badge.completed {
        background-color: rgba(46, 204, 113, 0.1);
        color: #2ECC71;
    }

    .status-badge.cancelled {
        background-color: rgba(231, 76, 60, 0.1);
        color: #E74C3C;
    }

    /* Status bars improvements */
    .status-time-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 20px;
    }
    
    .status-item, .time-slot-item {
        margin-bottom: 12px;
        padding: 8px 0;
    }
    
    .status-bar, .time-slot-bar {
        height: 8px;
        background-color: rgba(255,255,255,0.05);
        border-radius: 4px;
        overflow: hidden;
        margin-top: 8px;
    }
    
    .status-progress, .time-slot-progress {
        height: 100%;
        border-radius: 4px;
        transition: width 0.5s ease;
    }

    /* Stats cards improved styling */
    .stats-cards {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 24px;
        margin-bottom: 24px;
    }

    .stats-card {
        background: rgba(255, 255, 255, 0.03);
        border-radius: 20px;
        padding: 24px;
        border: 1px solid rgba(255, 255, 255, 0.05);
        backdrop-filter: blur(10px);
        transition: all 0.3s ease;
    }

    .stats-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.2);
        border-color: rgba(255, 255, 255, 0.1);
    }

    .stats-card-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 16px;
    }

    .stats-card-title {
        color: var(--text-muted, #ABBBC2);
        font-size: 14px;
        font-weight: 500;
    }

    .stats-card-icon {
        width: 48px;
        height: 48px;
        border-radius: 12px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 24px;
    }
    
    /* Color-coded icons */
    .stats-card-icon.revenue {
        background-color: rgba(46, 204, 113, 0.1);
        color: #2ECC71; /* Green for money */
    }
    
    .stats-card-icon.orders {
        background-color: rgba(52, 152, 219, 0.1);
        color: #3498DB; /* Blue for orders */
    }
    
    .stats-card-icon.customers {
        background-color: rgba(155, 89, 182, 0.1);
        color: #9B59B6; /* Purple for customers */
    }

    .stats-card-value {
        font-size: 32px;
        font-weight: 600;
        color: var(--text-color, #fff);
        margin: 0 0 8px 0;
    }

    .stats-card-change {
        display: flex;
        align-items: center;
        font-size: 14px;
        font-weight: 500;
    }
    
    /* Color-coded percentages */
    .stats-card-change.positive {
        color: #2ECC71;
    }
    
    .stats-card-change.negative {
        color: #E74C3C;
    }
    
    .stats-card-change.neutral {
        color: #95A5A6;
    }
    
    .stats-card-change i {
        margin-right: 4px;
        font-size: 16px;
    }
    
    /* Tooltip styling */
    .stats-card-change {
        position: relative;
        cursor: help;
    }
    
    .stats-card-change::after {
        content: attr(data-tooltip);
        position: absolute;
        bottom: 100%;
        left: 50%;
        transform: translateX(-50%) translateY(-8px);
        background: rgba(0, 0, 0, 0.8);
        color: white;
        padding: 8px 12px;
        border-radius: 8px;
        font-size: 12px;
        white-space: nowrap;
        visibility: hidden;
        opacity: 0;
        transition: all 0.3s ease;
        pointer-events: none;
        z-index: 100;
    }
    
    .stats-card-change:hover::after {
        visibility: visible;
        opacity: 1;
        transform: translateX(-50%) translateY(-4px);
    }

    /* Animations */
    @@keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .view-all-btn:hover {
        background: linear-gradient(45deg, var(--accent-color), #e96c57);
        color: white;
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(234, 124, 105, 0.3);
    }
</style>

<div class="dashboard-header">
    <div class="header-content">
        <h1>Dashboard</h1>
        <p class="date">@DateTime.Now.ToString("dddd, MMMM dd, yyyy")</p>
    </div>
    <div class="header-actions">
        <button id="refreshBtn" class="refresh-btn">
            <i class='bx bx-refresh'></i>
        </button>
    </div>
</div>

<!-- Date filter bar with server-side links -->
<div class="date-filter-bar">
    <a asp-page="Index" asp-route-dateFilter="@PizzaShopWebApp.Pages.Dashboard.DateFilterType.Today" 
       class="date-filter-option @(Model.DateFilter == PizzaShopWebApp.Pages.Dashboard.DateFilterType.Today ? "active" : "")">
        Today
    </a>
    <a asp-page="Index" asp-route-dateFilter="@PizzaShopWebApp.Pages.Dashboard.DateFilterType.Week" 
       class="date-filter-option @(Model.DateFilter == PizzaShopWebApp.Pages.Dashboard.DateFilterType.Week ? "active" : "")">
        Week
    </a>
    <a asp-page="Index" asp-route-dateFilter="@PizzaShopWebApp.Pages.Dashboard.DateFilterType.Month" 
       class="date-filter-option @(Model.DateFilter == PizzaShopWebApp.Pages.Dashboard.DateFilterType.Month ? "active" : "")">
        Month
    </a>
    <a asp-page="Index" asp-route-dateFilter="@PizzaShopWebApp.Pages.Dashboard.DateFilterType.Year" 
       class="date-filter-option @(Model.DateFilter == PizzaShopWebApp.Pages.Dashboard.DateFilterType.Year ? "active" : "")">
        Year
    </a>
    <a asp-page="Index" asp-route-dateFilter="@PizzaShopWebApp.Pages.Dashboard.DateFilterType.AllTime" 
       class="date-filter-option @(Model.DateFilter == PizzaShopWebApp.Pages.Dashboard.DateFilterType.AllTime ? "active" : "")">
        All Time
    </a>
</div>

<!-- Stats Cards -->
<div class="stats-cards">
    <div class="stats-card">
        <div class="stats-card-header">
            <div class="stats-card-title">Total Revenue</div>
            <div class="stats-card-icon revenue">
                <i class='bx bx-dollar'></i>
            </div>
        </div>
        <div class="stats-card-value">$@Model.TodayRevenue.ToString("N2")</div>
        @{
            var revenueChange = Model.RevenueChangePercent;
            var revenueClass = revenueChange > 0 ? "positive" : (revenueChange < 0 ? "negative" : "neutral");
            var revenueIcon = revenueChange > 0 ? "bx-up-arrow-alt" : (revenueChange < 0 ? "bx-down-arrow-alt" : "bx-minus");
            var revenueTooltip = "";
            
            switch (Model.DateFilter)
            {
                case PizzaShopWebApp.Pages.Dashboard.DateFilterType.Today:
                    revenueTooltip = revenueChange > 0 ? "Up from yesterday" : (revenueChange < 0 ? "Down from yesterday" : "No change from yesterday");
                    break;
                case PizzaShopWebApp.Pages.Dashboard.DateFilterType.Week:
                    revenueTooltip = revenueChange > 0 ? "Up from last week" : (revenueChange < 0 ? "Down from last week" : "No change from last week");
                    break;
                case PizzaShopWebApp.Pages.Dashboard.DateFilterType.Month:
                    revenueTooltip = revenueChange > 0 ? "Up from last month" : (revenueChange < 0 ? "Down from last month" : "No change from last month");
                    break;
                case PizzaShopWebApp.Pages.Dashboard.DateFilterType.Year:
                    revenueTooltip = revenueChange > 0 ? "Up from last year" : (revenueChange < 0 ? "Down from last year" : "No change from last year");
                    break;
                default:
                    revenueTooltip = revenueChange > 0 ? "Up overall" : (revenueChange < 0 ? "Down overall" : "No change overall");
                    break;
            }
        }
        <div class="stats-card-change @revenueClass" data-tooltip="@revenueTooltip">
            <i class='bx @revenueIcon'></i>
            <span>@Math.Abs(revenueChange).ToString("0.0")%</span>
        </div>
    </div>
    <div class="stats-card">
        <div class="stats-card-header">
            <div class="stats-card-title">Total Orders</div>
            <div class="stats-card-icon orders">
                <i class='bx bx-receipt'></i>
            </div>
        </div>
        <div class="stats-card-value">@Model.TodayOrders</div>
        @{
            var ordersChange = Model.OrdersChangePercent;
            var ordersClass = ordersChange > 0 ? "positive" : (ordersChange < 0 ? "negative" : "neutral");
            var ordersIcon = ordersChange > 0 ? "bx-up-arrow-alt" : (ordersChange < 0 ? "bx-down-arrow-alt" : "bx-minus");
            var ordersTooltip = "";
            
            switch (Model.DateFilter)
            {
                case PizzaShopWebApp.Pages.Dashboard.DateFilterType.Today:
                    ordersTooltip = ordersChange > 0 ? "Up from yesterday" : (ordersChange < 0 ? "Down from yesterday" : "No change from yesterday");
                    break;
                case PizzaShopWebApp.Pages.Dashboard.DateFilterType.Week:
                    ordersTooltip = ordersChange > 0 ? "Up from last week" : (ordersChange < 0 ? "Down from last week" : "No change from last week");
                    break;
                case PizzaShopWebApp.Pages.Dashboard.DateFilterType.Month:
                    ordersTooltip = ordersChange > 0 ? "Up from last month" : (ordersChange < 0 ? "Down from last month" : "No change from last month");
                    break;
                case PizzaShopWebApp.Pages.Dashboard.DateFilterType.Year:
                    ordersTooltip = ordersChange > 0 ? "Up from last year" : (ordersChange < 0 ? "Down from last year" : "No change from last year");
                    break;
                default:
                    ordersTooltip = ordersChange > 0 ? "Up overall" : (ordersChange < 0 ? "Down overall" : "No change overall");
                    break;
            }
        }
        <div class="stats-card-change @ordersClass" data-tooltip="@ordersTooltip">
            <i class='bx @ordersIcon'></i>
            <span>@Math.Abs(ordersChange).ToString("0.0")%</span>
        </div>
    </div>
    <div class="stats-card">
        <div class="stats-card-header">
            <div class="stats-card-title">Total Customers</div>
            <div class="stats-card-icon customers">
                <i class='bx bx-user'></i>
            </div>
        </div>
        <div class="stats-card-value">@Model.TodayCustomers</div>
        @{
            var customersChange = Model.CustomersChangePercent;
            var customersClass = customersChange > 0 ? "positive" : (customersChange < 0 ? "negative" : "neutral");
            var customersIcon = customersChange > 0 ? "bx-up-arrow-alt" : (customersChange < 0 ? "bx-down-arrow-alt" : "bx-minus");
            var customersTooltip = "";
            
            switch (Model.DateFilter)
            {
                case PizzaShopWebApp.Pages.Dashboard.DateFilterType.Today:
                    customersTooltip = customersChange > 0 ? "Up from yesterday" : (customersChange < 0 ? "Down from yesterday" : "No change from yesterday");
                    break;
                case PizzaShopWebApp.Pages.Dashboard.DateFilterType.Week:
                    customersTooltip = customersChange > 0 ? "Up from last week" : (customersChange < 0 ? "Down from last week" : "No change from last week");
                    break;
                case PizzaShopWebApp.Pages.Dashboard.DateFilterType.Month:
                    customersTooltip = customersChange > 0 ? "Up from last month" : (customersChange < 0 ? "Down from last month" : "No change from last month");
                    break;
                case PizzaShopWebApp.Pages.Dashboard.DateFilterType.Year:
                    customersTooltip = customersChange > 0 ? "Up from last year" : (customersChange < 0 ? "Down from last year" : "No change from last year");
                    break;
                default:
                    customersTooltip = customersChange > 0 ? "Up overall" : (customersChange < 0 ? "Down overall" : "No change overall");
                    break;
            }
        }
        <div class="stats-card-change @customersClass" data-tooltip="@customersTooltip">
            <i class='bx @customersIcon'></i>
            <span>@Math.Abs(customersChange).ToString("0.0")%</span>
        </div>
    </div>
</div>

<!-- Dashboard notification element -->
<div id="dashboardNotification" class="dashboard-notification">
    <svg class="checkmark" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 52 52">
        <circle class="checkmark-circle" cx="26" cy="26" r="25" fill="none" />
        <path class="checkmark-check" fill="none" d="M14.1 27.2l7.1 7.2 16.7-16.8" />
    </svg>
    <span>Dashboard updated</span>
</div>

<!-- Charts Row -->
<div class="dashboard-row">
    <div class="charts-grid" style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 24px; margin-bottom: 24px;">
        <!-- Revenue Trend -->
        <div class="chart-card" style="background: rgba(255, 255, 255, 0.03); border-radius: 20px; padding: 24px; border: 1px solid rgba(255, 255, 255, 0.05); backdrop-filter: blur(10px);">
            <div class="card-header">
                <h3 style="font-size: 18px; margin: 0; color: #fff;">
                    @switch (Model.DateFilter)
                    {
                        case PizzaShopWebApp.Pages.Dashboard.DateFilterType.Today:
                            <text>Today's Hourly Revenue</text>
                            break;
                        case PizzaShopWebApp.Pages.Dashboard.DateFilterType.Week:
                            <text>Weekly Revenue Trend</text>
                            break;
                        case PizzaShopWebApp.Pages.Dashboard.DateFilterType.Month:
                            <text>Monthly Revenue Trend</text>
                            break;
                        case PizzaShopWebApp.Pages.Dashboard.DateFilterType.Year:
                            <text>Yearly Revenue Trend</text>
                            break;
                        default:
                            <text>All Time Revenue Trend</text>
                            break;
                    }
                </h3>
            </div>
            <div class="chart-container" style="height: 300px; position: relative;">
                <canvas id="revenueChart"></canvas>
            </div>
        </div>

        <!-- Food Category Distribution -->
        <div class="chart-card" style="background: rgba(255, 255, 255, 0.03); border-radius: 20px; padding: 24px; border: 1px solid rgba(255, 255, 255, 0.05); backdrop-filter: blur(10px);">
            <div class="card-header">
                <h3 style="font-size: 18px; margin: 0; color: #fff;">
                    @switch (Model.DateFilter)
                    {
                        case PizzaShopWebApp.Pages.Dashboard.DateFilterType.Today:
                            <text>Today's Food Category Distribution</text>
                            break;
                        case PizzaShopWebApp.Pages.Dashboard.DateFilterType.Week:
                            <text>Weekly Food Category Distribution</text>
                            break;
                        case PizzaShopWebApp.Pages.Dashboard.DateFilterType.Month:
                            <text>Monthly Food Category Distribution</text>
                            break;
                        case PizzaShopWebApp.Pages.Dashboard.DateFilterType.Year:
                            <text>Yearly Food Category Distribution</text>
                            break;
                        default:
                            <text>All Time Food Category Distribution</text>
                            break;
                    }
                </h3>
            </div>
            <div class="chart-container" style="height: 300px; position: relative;">
                <canvas id="categoryDistributionChart"></canvas>
            </div>
        </div>
    </div>
</div>

<!-- Popular Items Row -->
<div class="dashboard-row">
    <!-- Popular Items -->
    <div class="popular-items chart-card" style="background: rgba(255, 255, 255, 0.03); border-radius: 20px; padding: 24px; border: 1px solid rgba(255, 255, 255, 0.05); backdrop-filter: blur(10px); margin-bottom: 24px;">
        <div class="card-header" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 16px;">
            <div>
                <h3 style="font-size: 18px; margin: 0; color: #fff;">Popular Items</h3>
                <div class="subtitle" style="color: var(--text-muted); font-size: 0.85rem; margin-top: 3px;">Top items for the selected period</div>
            </div>
            <button class="view-all-btn" style="padding: 8px 16px; background: rgba(234, 124, 105, 0.1); color: var(--accent-color); border: 1px solid rgba(234, 124, 105, 0.2); border-radius: 12px; cursor: pointer; transition: all 0.3s ease;">View All</button>
        </div>
        <div class="popular-items-grid">
            @foreach (var item in Model.MostOrderedItems)
            {
                <div class="popular-item" style="display: flex; flex-direction: column; background: rgba(255, 255, 255, 0.03); border-radius: 20px; overflow: hidden; height: 100%; min-height: 250px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15); transition: all 0.3s ease; border: 1px solid rgba(255, 255, 255, 0.05); backdrop-filter: blur(10px); opacity: 0; transform: translateY(20px); animation: fadeInUp 0.6s ease forwards; animation-delay: calc(0.1s * @Model.MostOrderedItems.IndexOf(item));">
                    <div class="popular-item-image" style="height: 140px; overflow: hidden; position: relative;">
                        <img src="@(string.IsNullOrEmpty(item.ImageUrl) ? "/images/placeholder-food.jpg" : item.ImageUrl)" 
                             alt="@item.Name"
                             class="lazy-load" style="width: 100%; height: 100%; object-fit: cover; transition: transform 0.3s ease;">
                        <div class="item-order-count" style="position: absolute; top: 10px; right: 10px; background: linear-gradient(135deg, #FF9F69, #FF4B4B); color: white; font-weight: bold; padding: 4px 10px; border-radius: 20px; font-size: 0.8rem; box-shadow: 0 2px 4px rgba(0,0,0,0.2);">@item.OrderCount orders</div>
                    </div>
                    <div class="popular-item-info" style="padding: 15px; display: flex; flex-direction: column; flex-grow: 1;">
                        <h4 style="margin: 0 0 8px 0; color: white; font-size: 1.1rem; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">@item.Name</h4>
                        <div class="popular-item-stats" style="display: flex; justify-content: space-between; align-items: center; margin-top: 8px;">
                            <span class="price" style="color: var(--accent-color); font-weight: bold; font-size: 1.1rem;">$@item.Price.ToString("0.00")</span>
                            <span class="category" style="color: var(--text-muted); font-size: 0.8rem; padding: 4px 8px; background-color: rgba(255, 255, 255, 0.05); border-radius: 12px;">@item.FoodCategoryName</span>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Distribution Row -->
<div class="dashboard-row">
    <div class="status-time-grid" style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 24px; margin-bottom: 24px;">
        <!-- Order Status Distribution -->
        <div class="status-card chart-card" style="background: rgba(255, 255, 255, 0.03); border-radius: 20px; padding: 24px; border: 1px solid rgba(255, 255, 255, 0.05); backdrop-filter: blur(10px);">
            <div class="card-header" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 16px;">
                <h3 style="font-size: 18px; margin: 0; color: #fff;">
                    @switch (Model.DateFilter)
                    {
                        case PizzaShopWebApp.Pages.Dashboard.DateFilterType.Today:
                            <text>Today's Order Status Distribution</text>
                            break;
                        case PizzaShopWebApp.Pages.Dashboard.DateFilterType.Week:
                            <text>Weekly Order Status Distribution</text>
                            break;
                        case PizzaShopWebApp.Pages.Dashboard.DateFilterType.Month:
                            <text>Monthly Order Status Distribution</text>
                            break;
                        case PizzaShopWebApp.Pages.Dashboard.DateFilterType.Year:
                            <text>Yearly Order Status Distribution</text>
                            break;
                        default:
                            <text>All Time Order Status Distribution</text>
                            break;
                    }
                </h3>
                <button class="view-all-btn" style="padding: 8px 16px; background: rgba(234, 124, 105, 0.1); color: var(--accent-color); border: 1px solid rgba(234, 124, 105, 0.2); border-radius: 12px; cursor: pointer; transition: all 0.3s ease;">View Details</button>
            </div>
            <div class="status-list">
                @foreach (var status in Model.OrderStatusDistribution)
                {
                    <div class="status-item" style="margin-bottom: 12px; padding: 8px 0; animation: fadeInUp 0.6s ease forwards; animation-delay: calc(0.1s * @Model.OrderStatusDistribution.ToList().IndexOf(status));">
                        <div class="status-info" style="display: flex; justify-content: space-between; margin-bottom: 6px;">
                            <span class="status-name" style="color: var(--text-color); font-weight: 500;">@status.Key</span>
                            <span class="status-count" style="color: var(--text-muted); font-size: 0.9rem;">@status.Value orders</span>
                        </div>
                        <div class="status-bar" style="height: 8px; background-color: rgba(255,255,255,0.05); border-radius: 4px; overflow: hidden; margin-top: 8px;">
                            <div class="status-progress" style="height: 100%; border-radius: 4px; transition: width 0.5s ease; background: linear-gradient(to right, var(--accent-color), #e96c57); width: @(Model.OrderStatusDistribution.Values.Max() > 0 ? (status.Value * 100 / Model.OrderStatusDistribution.Values.Max()) : 0)%"></div>
                        </div>
                    </div>
                }
            </div>
        </div>

        <!-- Orders by Time of Day -->
        <div class="time-distribution-card chart-card" style="background: rgba(255, 255, 255, 0.03); border-radius: 20px; padding: 24px; border: 1px solid rgba(255, 255, 255, 0.05); backdrop-filter: blur(10px);">
            <div class="card-header" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 16px;">
                <h3 style="font-size: 18px; margin: 0; color: #fff;">
                    @switch (Model.DateFilter)
                    {
                        case PizzaShopWebApp.Pages.Dashboard.DateFilterType.Today:
                            <text>Today's Orders by Time of Day</text>
                            break;
                        case PizzaShopWebApp.Pages.Dashboard.DateFilterType.Week:
                            <text>Weekly Orders by Time of Day</text>
                            break;
                        case PizzaShopWebApp.Pages.Dashboard.DateFilterType.Month:
                            <text>Monthly Orders by Time of Day</text>
                            break;
                        case PizzaShopWebApp.Pages.Dashboard.DateFilterType.Year:
                            <text>Yearly Orders by Time of Day</text>
                            break;
                        default:
                            <text>All Time Orders by Time of Day</text>
                            break;
                    }
                </h3>
                <button class="view-all-btn" style="padding: 8px 16px; background: rgba(234, 124, 105, 0.1); color: var(--accent-color); border: 1px solid rgba(234, 124, 105, 0.2); border-radius: 12px; cursor: pointer; transition: all 0.3s ease;">View Details</button>
            </div>
            <div class="time-distribution-list">
                @foreach (var timeSlot in Model.OrdersByTimeOfDay)
                {
                    <div class="time-slot-item" style="margin-bottom: 12px; padding: 8px 0; animation: fadeInUp 0.6s ease forwards; animation-delay: calc(0.1s * @Model.OrdersByTimeOfDay.ToList().IndexOf(timeSlot));">
                        <div class="time-slot-info" style="display: flex; justify-content: space-between; margin-bottom: 6px;">
                            <span class="time-slot-name" style="color: var(--text-color); font-weight: 500;">@timeSlot.Key</span>
                            <span class="time-slot-count" style="color: var(--text-muted); font-size: 0.9rem;">@timeSlot.Value orders</span>
                        </div>
                        <div class="time-slot-bar" style="height: 8px; background-color: rgba(255,255,255,0.05); border-radius: 4px; overflow: hidden; margin-top: 8px;">
                            <div class="time-slot-progress" style="height: 100%; border-radius: 4px; transition: width 0.5s ease; background: linear-gradient(to right, var(--accent-color), #e96c57); width: @(Model.OrdersByTimeOfDay.Values.Max() > 0 ? (timeSlot.Value * 100 / Model.OrdersByTimeOfDay.Values.Max()) : 0)%"></div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Recent Orders Row -->
<div class="dashboard-row">
    <!-- Recent Orders -->
    <div class="orders-card chart-card" style="background: rgba(255, 255, 255, 0.03); border-radius: 20px; padding: 24px; border: 1px solid rgba(255, 255, 255, 0.05); backdrop-filter: blur(10px); margin-bottom: 24px;">
        <div class="card-header" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 16px;">
            <h3 style="font-size: 18px; margin: 0; color: #fff;">Recent Orders</h3>
            <button class="view-all-btn" style="padding: 8px 16px; background: rgba(234, 124, 105, 0.1); color: var(--accent-color); border: 1px solid rgba(234, 124, 105, 0.2); border-radius: 12px; cursor: pointer; transition: all 0.3s ease;">View All</button>
        </div>
        <div class="orders-table-container">
            <table class="orders-table">
                <thead>
                    <tr>
                        <th>Order #</th>
                        <th>Customer</th>
                        <th>Items</th>
                        <th>Total</th>
                        <th>Status</th>
                        <th>Date</th>
                        <th>Time</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var order in Model.RecentOrders)
                    {
                        <tr style="animation: fadeInUp 0.6s ease forwards; animation-delay: calc(0.05s * @Model.RecentOrders.IndexOf(order));">
                            <td>Order #@order.OrderNumber</td>
                            <td>@(string.IsNullOrEmpty(order.CustomerName) ? $"Customer #{order.CustomerId}" : order.CustomerName)</td>
                            <td>
                                @if (order.Items.Any())
                                {
                                    @order.Items.First().FoodName
                                    @if (order.Items.Count > 1)
                                    {
                                        <span class="more-items">+@(order.Items.Count - 1)</span>
                                    }
                                }
                            </td>
                            <td>$@order.TotalAmount.ToString("N2")</td>
                            <td>
                                <span class="status-badge @Model.GetStatusClass(order.Status)">
                                    @order.Status
                                </span>
                            </td>
                            <td>@order.OrderDate.ToString("MM/dd/yyyy")</td>
                            <td>@order.OrderDate.ToString("HH:mm")</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Refresh button functionality
            const refreshBtn = document.getElementById('refreshBtn');
            const notification = document.getElementById('dashboardNotification');
            
            refreshBtn.addEventListener('click', function() {
                // Add loading class to button
                refreshBtn.classList.add('loading');
                
                // After a short delay, refresh the page
                setTimeout(function() {
                    // Show notification first
                    notification.classList.add('show');
                    
                    // Then after a slight delay, reload the page
                    setTimeout(function() {
                        window.location.reload();
                    }, 1000);
                }, 800);
            });
            
            // Hide notification after 3 seconds if it's shown
            if (notification.classList.contains('show')) {
                setTimeout(function() {
                    notification.classList.remove('show');
                }, 3000);
            }
            
            // Lazy load images to prevent flickering
            const popularItems = document.querySelectorAll('.popular-item');
            popularItems.forEach((item, index) => {
                setTimeout(() => {
                    item.classList.add('card-loaded');
                }, index * 100);
            });
            
            const lazyImages = document.querySelectorAll('.lazy-load');
            lazyImages.forEach(img => {
                const src = img.getAttribute('data-src');
                if (src) {
                    // Create a new image to preload
                    const tempImg = new Image();
                    tempImg.onload = function() {
                        img.src = src;
                    };
                    tempImg.onerror = function() {
                        // Keep the placeholder if error occurs
                    };
                    tempImg.src = src;
                }
            });
        });

        // Revenue Chart
        const revenueCtx = document.getElementById('revenueChart').getContext('2d');
        new Chart(revenueCtx, {
            type: 'line',
            data: {
                labels: @Html.Raw(Json.Serialize(Model.WeeklySalesTrend.Keys)),
                datasets: [{
                    label: 'Revenue',
                    data: @Html.Raw(Json.Serialize(Model.WeeklySalesTrend.Values)),
                    borderColor: '#EA7C69',
                    backgroundColor: 'rgba(234, 124, 105, 0.1)',
                    tension: 0.4,
                    fill: true
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        grid: {
                            color: 'rgba(255, 255, 255, 0.1)'
                        },
                        ticks: {
                            color: '#ABBBC2'
                        }
                    },
                    x: {
                        grid: {
                            display: false
                        },
                        ticks: {
                            color: '#ABBBC2'
                        }
                    }
                }
            }
        });

        // Food Category Distribution Chart
        var categoryCtx = document.getElementById('categoryDistributionChart').getContext('2d');
        new Chart(categoryCtx, {
            type: 'doughnut',
            data: {
                labels: @Html.Raw(Json.Serialize(Model.OrderTypeDistribution.Keys)),
                datasets: [{
                    data: @Html.Raw(Json.Serialize(Model.OrderTypeDistribution.Values)),
                    backgroundColor: [
                        '#EA7C69',
                        '#4ECDC4',
                        '#45B7D1',
                        '#96CEB4',
                        '#FFEEAD'
                    ]
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'bottom',
                        labels: {
                            color: '#ABBBC2',
                            font: {
                                family: 'Poppins, sans-serif'
                            }
                        }
                    }
                }
            }
        });
    </script>
} 