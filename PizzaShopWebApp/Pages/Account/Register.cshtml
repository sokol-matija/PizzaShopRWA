@page
@model PizzaShopWebApp.Pages.Account.RegisterModel
@{
    ViewData["Title"] = "Register";
    Layout = "_LoginLayout";
}

<div class="pizza-bg" id="pizzaBackground">
    <!-- Pizza icons will be added via JavaScript -->
</div>

<div class="login-container">
    <div class="login-box register-box">
        <div class="logo-container">
            <img src="~/images/pizza-logo.svg" alt="Pizza Shop Logo" class="logo" />
            <h1>Pizza Shop</h1>
        </div>
        
        <div class="login-form">
            <h2>Create Account</h2>
            <p class="login-subtitle">Sign up to order your favorite pizza</p>
            
            <form method="post">
                <div asp-validation-summary="All" class="validation-summary-errors" style="display:@(ViewData.ModelState.ErrorCount > 0 ? "block" : "none")"></div>
                
                <div class="form-group">
                    <label asp-for="Input.Username">Username</label>
                    <input type="text" class="form-control" asp-for="Input.Username" placeholder="Choose a username" required />
                    <span asp-validation-for="Input.Username" class="field-validation-error"></span>
                </div>
                
                <div class="form-group">
                    <label asp-for="Input.Email">Email</label>
                    <input type="email" class="form-control" asp-for="Input.Email" placeholder="Enter your email" required />
                    <span asp-validation-for="Input.Email" class="field-validation-error"></span>
                </div>
                
                <div class="form-group">
                    <label asp-for="Input.Password">Password</label>
                    <input type="password" class="form-control" asp-for="Input.Password" placeholder="Create a password" required />
                    <span asp-validation-for="Input.Password" class="field-validation-error"></span>
                </div>
                
                <div class="form-group">
                    <label asp-for="Input.ConfirmPassword">Confirm Password</label>
                    <input type="password" class="form-control" asp-for="Input.ConfirmPassword" placeholder="Confirm your password" required />
                    <span asp-validation-for="Input.ConfirmPassword" class="field-validation-error"></span>
                </div>
                
                <div class="optional-info">
                    <h3>Optional Information</h3>
                    <div class="form-row">
                        <div class="form-group half">
                            <label asp-for="Input.FirstName">First Name</label>
                            <input type="text" class="form-control" asp-for="Input.FirstName" placeholder="First name" />
                        </div>
                        <div class="form-group half">
                            <label asp-for="Input.LastName">Last Name</label>
                            <input type="text" class="form-control" asp-for="Input.LastName" placeholder="Last name" />
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label asp-for="Input.PhoneNumber">Phone Number</label>
                        <input type="tel" class="form-control" asp-for="Input.PhoneNumber" placeholder="Your phone number" />
                    </div>
                    
                    <div class="form-group">
                        <label asp-for="Input.Address">Address</label>
                        <input type="text" class="form-control" asp-for="Input.Address" placeholder="Your delivery address" />
                    </div>
                </div>
                
                <button type="submit" class="btn btn-primary login-button">Create Account</button>
            </form>
            
            <div class="register-link">
                Already have an account? <a asp-page="/Account/Login">Log in</a>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Create animated pizza background
        document.addEventListener('DOMContentLoaded', function() {
            const pizzaBackground = document.getElementById('pizzaBackground');
            const pizzaImages = [
                '/images/pizza-slice.svg',
                '/images/pizza-whole.svg',
                '/images/tomato.svg',
                '/images/cheese.svg',
                '/images/mushroom.svg'
            ];
            
            // Create 15 pizza elements
            for (let i = 0; i < 15; i++) {
                createPizzaElement();
            }
            
            // Add new pizza elements periodically
            setInterval(createPizzaElement, 3000);
            
            function createPizzaElement() {
                const pizza = document.createElement('div');
                pizza.className = 'pizza-icon';
                
                // Randomly select a pizza image
                const randomImage = pizzaImages[Math.floor(Math.random() * pizzaImages.length)];
                pizza.style.backgroundImage = `url(${randomImage})`;
                
                // Random starting position
                const startPositionX = Math.random() * 100; // % of viewport width
                const startPositionY = 100 + (Math.random() * 20); // % of viewport height (below viewport)
                pizza.style.left = `${startPositionX}%`;
                pizza.style.top = `${startPositionY}%`;
                
                // Random size (30-60px)
                const size = 30 + (Math.random() * 30);
                pizza.style.width = `${size}px`;
                pizza.style.height = `${size}px`;
                
                // Random animation duration (8-15s)
                const duration = 8 + (Math.random() * 7);
                pizza.style.animationDuration = `${duration}s`;
                
                // Add to the background
                pizzaBackground.appendChild(pizza);
                
                // Remove after animation completes
                setTimeout(() => {
                    if (pizza.parentNode === pizzaBackground) {
                        pizzaBackground.removeChild(pizza);
                    }
                }, duration * 1000);
            }
        });
    </script>
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
} 