@page
@model PizzaShopWebApp.Pages.Dashboard.OrderPageModel
@{
    ViewData["Title"] = "Order Food";
    Layout = "_DashboardLayout";
}

<link rel="stylesheet" href="~/css/animations.css" />

<div class="order-container">
    <div class="order-content">
        <div class="order-header">
            <h1>Place Order</h1>
            
            <div class="search-filter-container">
                <div class="search-bar">
                    <i class="bx bx-search"></i>
                    <input type="text" id="searchInput" name="searchTerm" value="@Model.SearchTerm" placeholder="Search for food, coffee, etc.." />
                    @if (!string.IsNullOrEmpty(Model.SearchTerm))
                    {
                        <button type="button" class="clear-search" onclick="clearSearch()">
                            <i class='bx bx-x'></i>
                        </button>
                    }
                </div>
                
                <div class="filter-dropdown">
                    <select id="categoryFilter" name="categoryId">
                        <option value="">All Categories</option>
                        @foreach (var category in Model.Categories)
                        {
                            <option value="@category.Id" selected="@(Model.SelectedCategoryId == category.Id)">@category.Name</option>
                        }
                    </select>
                </div>
            </div>
        </div>
        
        <div class="category-tabs">
            <button class="category-tab @(Model.SelectedCategoryId == null ? "active" : "")" onclick="window.location.href='?'">All</button>
            @foreach (var category in Model.Categories.Take(4))
            {
                <button class="category-tab @(Model.SelectedCategoryId == category.Id ? "active" : "")" 
                        onclick="window.location.href='?categoryId=@category.Id'">@category.Name</button>
            }
        </div>
        
        <div class="allergen-filters">
            <h3 class="allergen-filters-title">Filter by allergens:</h3>
            <div class="allergen-icons-container">
                @foreach (var allergen in Model.Allergens)
                {
                    <div class="allergen-filter @(Model.ExcludedAllergenIds.Contains(allergen.Id) ? "excluded" : "")" 
                         data-allergen-id="@allergen.Id" onclick="toggleAllergenFilter(@allergen.Id)">
                        <div class="allergen-icon">
                            @switch (allergen.Name.ToLower())
                            {
                                case "gluten":
                                    <i class='bx bx-cookie'></i>
                                    break;
                                case "dairy":
                                    <i class='bx bxs-drink'></i>
                                    break;
                                case "nuts":
                                    <i class='bx bx-food-menu'></i>
                                    break;
                                case "soy":
                                    <i class='bx bx-food-tag'></i>
                                    break;
                                case "shellfish":
                                    <i class='bx bx-bowl-hot'></i>
                                    break;
                                case "eggs":
                                    <i class='bx bx-dish'></i>
                                    break;
                                default:
                                    <i class='bx bx-food-tag'></i>
                                    break;
                            }
                        </div>
                        <span class="allergen-name">@allergen.Name</span>
                    </div>
                }
            </div>
        </div>
        
        <div class="food-card-grid">
            @if (Model.Foods.Any())
            {
                @foreach (var food in Model.Foods)
                {
                    <div class="food-card" data-id="@food.Id">
                        <div class="food-card-image">
                            <img src="@(string.IsNullOrEmpty(food.ImageUrl) ? "/Images/basic_food_image.png" : food.ImageUrl)" alt="@food.Name">
                            @if (food.IsPopular)
                            {
                                <span class="food-badge popular">Popular</span>
                            }
                            
                            @if (food.Allergens.Any())
                            {
                                <div class="food-allergen-tags">
                                    @foreach (var allergen in food.Allergens.Take(3))
                                    {
                                        <span class="food-allergen-tag" title="@allergen.Name">
                                            <i class='bx bx-food-tag'></i>
                                        </span>
                                    }
                                    @if (food.Allergens.Count > 3)
                                    {
                                        <span class="food-allergen-tag more">+@(food.Allergens.Count - 3)</span>
                                    }
                                </div>
                            }
                        </div>
                        <div class="food-card-content">
                            <h3 class="food-card-name">@food.Name</h3>
                            <p class="food-card-price">$@food.Price.ToString("0.00")</p>
                            <p class="food-card-available">@(food.OrderCount > 0 ? $"{food.OrderCount} Bowls available" : "Available")</p>
                            <form method="post" asp-page-handler="AddToCart" class="add-to-cart-form" onsubmit="return addToCartSubmit(event, @food.Id)">
                                <input type="hidden" name="foodId" value="@food.Id" />
                                <input type="hidden" name="quantity" value="1" class="quantity-input" />
                                <div class="add-to-cart-container">
                                    <button type="submit" class="add-to-cart-btn">
                                        <i class='bx bx-plus'></i>
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="no-items-message">
                    <i class='bx bx-search-alt no-results-icon'></i>
                    <p>No items found. Try adjusting your search or filter.</p>
                </div>
            }
        </div>
    </div>
    
    <div class="order-sidebar">
        <div class="cart-header">
            <h2>Current Order <span class="cart-count-badge">@Model.GetTotalItems()</span></h2>
            @if (Model.CartItems.Any())
            {
                <form method="post" asp-page-handler="ClearCart">
                    <button type="submit" class="clear-cart-btn">Clear All</button>
                </form>
            }
        </div>
        
        <div class="cart-items">
            @if (Model.CartItems.Any())
            {
                @foreach (var item in Model.CartItems)
                {
                    <div class="cart-item" data-item-id="@item.Id">
                        <div class="cart-item-info">
                            <h3 class="cart-item-name">@item.Name</h3>
                            <p class="cart-item-price">$@item.Price.ToString("0.00")</p>
                        </div>
                        
                        <div class="cart-item-actions">
                            <div class="quantity-controls">
                                <form method="post" asp-page-handler="UpdateCart" class="update-cart-form">
                                    <input type="hidden" name="itemId" value="@item.Id" />
                                    <button type="submit" name="quantity" value="@(item.Quantity - 1)" class="quantity-btn minus">
                                        <i class='bx bx-minus'></i>
                                    </button>
                                    <span class="quantity">@item.Quantity</span>
                                    <button type="submit" name="quantity" value="@(item.Quantity + 1)" class="quantity-btn plus">
                                        <i class='bx bx-plus'></i>
                                    </button>
                                </form>
                            </div>
                            
                            <form method="post" asp-page-handler="RemoveFromCart">
                                <input type="hidden" name="itemId" value="@item.Id" />
                                <button type="submit" class="remove-item-btn">
                                    <i class='bx bx-trash'></i>
                                </button>
                            </form>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="empty-cart">
                    <i class='bx bx-cart-alt empty-cart-icon'></i>
                    <p>Your cart is empty</p>
                    <p class="empty-cart-subtitle">Add some delicious items!</p>
                </div>
            }
        </div>
        
        <div class="cart-summary">
            <div class="summary-row">
                <span>Subtotal</span>
                <span>$@Model.GetCartTotal().ToString("0.00")</span>
            </div>
            <div class="summary-row">
                <span>Discount</span>
                <span>-$0.00</span>
            </div>
            <div class="summary-row total">
                <span>Total</span>
                <span>$@Model.GetCartTotal().ToString("0.00")</span>
            </div>
        </div>
        
        <a href="/Dashboard/Payment" class="checkout-btn @(Model.CartItems.Any() ? "" : "disabled")" id="checkoutBtn" @(Model.CartItems.Any() ? "" : "disabled")>
            <span>Continue to Payment</span>
            <i class='bx bx-right-arrow-alt'></i>
        </a>
    </div>
</div>

<div id="notification" class="notification">
    <div class="notification-content">
        <div class="notification-icon-container">
            <i class="notification-icon"></i>
            <svg class="checkmark-svg" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 52 52">
                <circle class="checkmark-circle" cx="26" cy="26" r="25" fill="none"/>
                <path class="checkmark-check" fill="none" d="M14.1 27.2l7.1 7.2 16.7-16.8"/>
            </svg>
        </div>
        <span class="notification-message"></span>
    </div>
    <button class="notification-close"><i class='bx bx-x'></i></button>
</div>

<style>
    :root {
        --scrollbar-width: 6px;
        --scrollbar-height: 4px;
        --scrollbar-thumb-color: var(--accent-color);
        --scrollbar-thumb-hover-color: var(--accent-hover);
        --scrollbar-track-color-light: var(--secondary-bg-color);
        --scrollbar-track-color-dark: var(--dark-bg-color);
        --scrollbar-radius: 4px;
        --success-color: #2ECC71;
        --success-light: rgba(46, 204, 113, 0.15);
        --error-color: #FF7A7A;
        --card-anim-time: 0.3s;
        --card-radius: 16px;
        --card-image-height: 140px;
        --card-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        --card-hover-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
        --card-active-shadow: 0 12px 32px rgba(0, 0, 0, 0.2);
    }
    
    .order-container {
        display: flex;
        gap: 24px;
        height: calc(100vh - 100px);
    }
    
    .order-content {
        flex: 1;
        overflow-y: auto;
        padding: 0 10px 20px 0;
    }
    
    .order-content::-webkit-scrollbar {
        width: var(--scrollbar-width);
    }
    
    .order-content::-webkit-scrollbar-track {
        background: var(--scrollbar-track-color-light);
        border-radius: var(--scrollbar-radius);
    }
    
    .order-content::-webkit-scrollbar-thumb {
        background-color: var(--scrollbar-thumb-color);
        border-radius: var(--scrollbar-radius);
    }
    
    .order-content::-webkit-scrollbar-thumb:hover {
        background-color: var(--scrollbar-thumb-hover-color);
    }
    
    .order-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 24px;
        position: sticky;
        top: 0;
        background: var(--bg-color);
        padding: 20px 0;
        z-index: 100;
        backdrop-filter: blur(10px);
    }
    
    .order-header h1 {
        font-size: 28px;
        font-weight: 600;
        margin: 0;
    }
    
    .search-filter-container {
        display: flex;
        gap: 16px;
        align-items: center;
        flex: 1;
        max-width: 400px;
        margin-left: 24px;
    }
    
    .search-bar {
        position: relative;
        width: 100%;
    }
    
    .search-bar i {
        position: absolute;
        left: 12px;
        top: 50%;
        transform: translateY(-50%);
        color: var(--text-muted);
    }
    
    .search-bar input {
        width: 100%;
        padding: 12px 40px;
        background-color: var(--dark-bg-color);
        border: 1px solid var(--border-color);
        border-radius: 12px;
        color: var(--text-color);
        font-size: 14px;
        transition: all 0.3s ease;
    }
    
    .search-bar input:focus {
        border-color: var(--accent-color);
        outline: none;
        box-shadow: 0 0 0 3px rgba(234, 124, 105, 0.25);
        transform: translateY(-1px);
    }
    
    .clear-search {
        position: absolute;
        right: 12px;
        top: 50%;
        transform: translateY(-50%);
        background: none;
        border: none;
        color: var(--text-muted);
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 0;
        font-size: 16px;
        width: 24px;
        height: 24px;
        border-radius: 50%;
        transition: all 0.2s ease;
    }
    
    .clear-search:hover {
        color: var(--text-color);
        background-color: rgba(255, 255, 255, 0.1);
    }
    
    .filter-dropdown select {
        padding: 12px 16px;
        background-color: var(--dark-bg-color);
        border: 1px solid var(--border-color);
        border-radius: 12px;
        color: var(--text-color);
        font-size: 14px;
        cursor: pointer;
        min-width: 160px;
        transition: all 0.2s ease;
    }
    
    .filter-dropdown select:focus {
        border-color: var(--accent-color);
        outline: none;
        box-shadow: 0 0 0 2px rgba(234, 124, 105, 0.3);
    }
    
    .category-tabs {
        display: flex;
        gap: 12px;
        margin-bottom: 24px;
        overflow-x: auto;
        padding: 4px 4px 12px 4px;
        scrollbar-width: thin;
        scrollbar-color: var(--accent-color) transparent;
    }
    
    .category-tabs::-webkit-scrollbar {
        height: 6px;
    }
    
    .category-tabs::-webkit-scrollbar-track {
        background: transparent;
    }
    
    .category-tabs::-webkit-scrollbar-thumb {
        background-color: var(--accent-color);
        border-radius: 20px;
    }
    
    .category-tab {
        padding: 10px 20px;
        background-color: var(--dark-bg-color);
        border: none;
        border-radius: 8px;
        color: var(--text-muted);
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s;
        white-space: nowrap;
        min-width: max-content;
    }
    
    .category-tab.active {
        background-color: var(--accent-color);
        color: white;
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(234, 124, 105, 0.25);
    }
    
    .category-tab:hover:not(.active) {
        background-color: rgba(234, 124, 105, 0.1);
        color: var(--accent-color);
        transform: translateY(-1px);
    }
    
    .dashboard-container {
        margin-left: 1rem;
    }

    .food-card-grid {
        display: flex;
        flex-wrap: wrap;
        gap: 24px;
        padding: 40px 0;
    }
    
    .food-card {
        background-color: var(--dark-bg-color);
        border-radius: var(--card-radius);
        overflow: visible;
        transition: transform var(--card-anim-time), box-shadow var(--card-anim-time);
        position: relative;
        display: flex;
        flex-direction: column;
        box-shadow: var(--card-shadow);
        width: calc(29% - 16px);
        min-width: 120px;
        margin-bottom: 20px;
        padding-top: 60px;
    }
    
    .food-card:hover {
        transform: translateY(-10px);
        box-shadow: var(--card-hover-shadow);
    }
    
    .food-card.added-to-cart {
        animation: addToCartPulse 0.7s ease-in-out;
    }
    
    .food-card-image {
        position: absolute;
        top: -40px;
        left: 50%;
        transform: translateX(-50%);
        width: 120px;
        height: 120px;
        border-radius: 50%;
        overflow: hidden;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
        background-color: var(--dark-bg-color);
        z-index: 1;
    }
    
    .food-card-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.5s ease;
    }
    
    .food-card:hover .food-card-image img {
        /* transform: scale(1.1); */
    }
    
    .food-badge {
        position: absolute;
        top: 10px;
        left: 10px;
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 12px;
        font-weight: 500;
    }
    
    .food-badge.popular {
        background-color: var(--accent-color);
        color: white;
    }
    
    .food-card-content {
        padding: 16px;
        position: relative;
        flex: 1;
        display: flex;
        flex-direction: column;
        text-align: center;
    }
    
    .food-card-name {
        font-size: 16px;
        font-weight: 500;
        margin: 0 0 8px 0;
        color: var(--text-color);
    }
    
    .food-card-price {
        font-size: 18px;
        font-weight: 600;
        margin: 0 0 8px 0;
        color: var(--text-color);
    }
    
    .food-card-available {
        font-size: 12px;
        color: var(--text-muted);
        margin: 0 0 12px 0;
    }
    
    .add-to-cart-container {
        display: flex;
        justify-content: center;
        margin-top: auto;
    }
    
    .add-to-cart-btn {
        width: 36px;
        height: 36px;
        border-radius: 8px;
        background-color: var(--accent-color);
        color: white;
        border: none;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        position: relative;
        overflow: hidden;
        box-shadow: 0 4px 12px rgba(234, 124, 105, 0.3);
    }
    
    .add-to-cart-btn i {
        transition: transform 0.4s ease;
    }
    
    .add-to-cart-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 16px rgba(234, 124, 105, 0.4);
    }
    
    .add-to-cart-btn:hover i {
        transform: rotate(90deg);
    }
    
    .add-to-cart-btn:active {
        transform: translateY(0);
    }
    
    .add-to-cart-btn.clicked {
        animation: buttonPulse 0.6s ease;
    }
    
    .add-to-cart-btn.clicked i {
        animation: spinAddIcon 0.6s ease;
    }
    
    .no-items-message {
        grid-column: 1 / -1;
        text-align: center;
        padding: 60px 40px;
        background-color: var(--dark-bg-color);
        border-radius: 16px;
        color: var(--text-muted);
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 16px;
        box-shadow: var(--card-shadow);
    }
    
    .no-results-icon {
        font-size: 48px;
        opacity: 0.5;
    }
    
    .order-sidebar {
        width: 350px;
        background-color: var(--dark-bg-color);
        border-radius: 16px;
        padding: 24px;
        display: flex;
        flex-direction: column;
        height: 100%;
        box-shadow: var(--card-shadow);
    }
    
    .cart-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
        padding-bottom: 16px;
        border-bottom: 1px solid var(--border-color);
    }
    
    .cart-header h2 {
        font-size: 20px;
        font-weight: 600;
        margin: 0;
        display: flex;
        align-items: center;
    }
    
    .cart-count-badge {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        min-width: 24px;
        height: 24px;
        background-color: var(--accent-color);
        color: white;
        border-radius: 12px;
        font-size: 12px;
        margin-left: 8px;
        padding: 0 6px;
        transition: all 0.3s;
    }
    
    .cart-count-badge:empty {
        display: none;
    }
    
    .clear-cart-btn {
        background: transparent;
        border: none;
        color: var(--accent-color);
        font-size: 14px;
        cursor: pointer;
        transition: color 0.2s;
    }
    
    .clear-cart-btn:hover {
        color: var(--accent-hover);
        text-decoration: underline;
    }
    
    .cart-items {
        flex: 1;
        overflow-y: auto;
        margin-bottom: 24px;
        padding-right: 8px;
        scrollbar-width: thin;
        scrollbar-color: var(--accent-color) transparent;
    }
    
    .cart-items::-webkit-scrollbar {
        width: 6px;
    }
    
    .cart-items::-webkit-scrollbar-track {
        background: transparent;
    }
    
    .cart-items::-webkit-scrollbar-thumb {
        background-color: var(--accent-color);
        border-radius: 20px;
    }
    
    .cart-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 16px 0;
        border-bottom: 1px solid var(--border-color);
        animation: fadeIn 0.3s ease-in-out;
    }
    
    .cart-item:last-child {
        border-bottom: none;
    }
    
    .cart-item-info {
        flex: 1;
    }
    
    .cart-item-name {
        font-size: 16px;
        font-weight: 500;
        margin: 0 0 4px 0;
    }
    
    .cart-item-price {
        font-size: 14px;
        color: var(--text-muted);
        margin: 0;
    }
    
    .cart-item-actions {
        display: flex;
        align-items: center;
        gap: 16px;
    }
    
    .quantity-controls {
        display: flex;
        align-items: center;
    }
    
    .update-cart-form {
        display: flex;
        align-items: center;
    }
    
    .quantity-btn {
        width: 28px;
        height: 28px;
        border-radius: 8px;
        background-color: var(--secondary-bg-color);
        color: var(--text-color);
        border: 1px solid var(--border-color);
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.2s;
    }
    
    .quantity-btn:hover {
        background-color: var(--border-color);
        transform: scale(1.05);
    }
    
    .quantity-btn:active {
        transform: scale(0.95);
    }
    
    .quantity {
        margin: 0 8px;
        font-size: 14px;
        min-width: 20px;
        text-align: center;
    }
    
    .remove-item-btn {
        background: transparent;
        border: none;
        color: var(--text-muted);
        cursor: pointer;
        transition: all 0.2s;
    }
    
    .remove-item-btn:hover {
        color: var(--accent-color);
        transform: scale(1.1);
    }
    
    .remove-item-btn:active {
        transform: scale(0.95);
    }
    
    .remove-item-btn i {
        font-size: 18px;
    }
    
    .empty-cart {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        text-align: center;
        padding: 60px 0;
        color: var(--text-muted);
    }
    
    .empty-cart-icon {
        font-size: 48px;
        margin-bottom: 16px;
        color: var(--border-color);
    }
    
    .empty-cart p {
        margin: 0 0 4px 0;
        font-size: 16px;
    }
    
    .empty-cart-subtitle {
        font-size: 14px !important;
        opacity: 0.7;
    }
    
    .cart-summary {
        margin-bottom: 24px;
        background-color: var(--secondary-bg-color);
        border-radius: 12px;
        padding: 16px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }
    
    .summary-row {
        display: flex;
        justify-content: space-between;
        margin-bottom: 12px;
        font-size: 14px;
        color: var(--text-muted);
    }
    
    .summary-row:last-child {
        margin-bottom: 0;
    }
    
    .summary-row.total {
        font-weight: 600;
        font-size: 16px;
        color: var(--text-color);
        padding-top: 12px;
        border-top: 1px solid var(--border-color);
        margin-top: 12px;
    }
    
    .checkout-btn {
        padding: 14px 20px;
        background-color: var(--accent-color);
        color: white;
        border: none;
        border-radius: 8px;
        font-size: 16px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
        text-decoration: none;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
    }
    
    .checkout-btn i {
        font-size: 20px;
        transition: transform 0.3s;
    }
    
    .checkout-btn:hover {
        background-color: var(--accent-hover);
        transform: translateY(-2px);
    }
    
    .checkout-btn:hover i {
        transform: translateX(4px);
    }
    
    .checkout-btn:active {
        transform: translateY(0);
    }
    
    .checkout-btn.disabled {
        background-color: var(--border-color);
        cursor: not-allowed;
        opacity: 0.7;
        box-shadow: none;
    }
    
    .notification {
        position: fixed;
        bottom: 30px;
        right: 30px;
        background-color: var(--dark-bg-color, #1F1D2B);
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 16px 20px;
        z-index: 1000;
        min-width: 300px;
        transform: translateY(100px);
        opacity: 0;
        visibility: hidden;
        transition: transform 0.3s, opacity 0.3s, visibility 0.3s;
        border: 1px solid var(--border-color, rgba(255, 255, 255, 0.1));
    }
    
    .notification.show {
        transform: translateY(0);
        opacity: 1;
        visibility: visible;
        animation: notificationBounce 0.5s ease forwards;
    }
    
    .notification.success {
        border-left: 4px solid var(--success-color);
        background-color: var(--dark-bg-color, #1F1D2B);
    }
    
    .notification.error {
        border-left: 4px solid var(--error-color);
        background-color: var(--dark-bg-color, #1F1D2B);
    }
    
    .notification-content {
        display: flex;
        align-items: center;
        gap: 12px;
    }
    
    .notification-icon-container {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background-color: var(--success-color);
        transition: all 0.3s ease;
        position: relative;
    }
    
    .notification.success .notification-icon-container {
        background-color: var(--success-color);
    }
    
    .notification.error .notification-icon-container {
        background-color: var(--error-color);
    }
    
    .notification-icon {
        font-size: 20px;
        animation: iconPop 0.5s ease 0.1s forwards;
        color: white;
    }
    
    .checkmark-svg {
        width: 36px;
        height: 36px;
        position: absolute;
        border-radius: 50%;
        display: none;
        stroke-width: 3;
        stroke: white;
        stroke-miterlimit: 10;
    }
    
    .checkmark-circle {
        stroke-dasharray: 166;
        stroke-dashoffset: 166;
        stroke-width: 3;
        stroke: white;
        fill: none;
        animation: stroke 0.6s cubic-bezier(0.65, 0, 0.45, 1) forwards;
    }
    
    .checkmark-check {
        transform-origin: 50% 50%;
        stroke-dasharray: 48;
        stroke-dashoffset: 48;
        stroke-width: 4;
        stroke: white;
        animation: stroke 0.4s cubic-bezier(0.65, 0, 0.45, 1) 0.4s forwards;
    }
    
    .notification.success .notification-icon {
        color: white;
    }
    
    .notification.error .notification-icon {
        color: white;
    }
    
    .notification-message {
        font-size: 14px;
        color: var(--text-color, #fff);
        font-weight: 500;
    }
    
    .notification-close {
        background: transparent;
        border: none;
        color: var(--text-muted, #ABBBC2);
        cursor: pointer;
        padding: 0;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 18px;
        transition: color 0.2s;
    }
    
    .notification-close:hover {
        color: var(--text-color, #fff);
    }
    
    @@media (max-width: 1200px) {
        .food-card {
            width: calc(50% - 12px);
        }
    }
    
    @@media (max-width: 992px) {
        .order-header {
            flex-wrap: wrap;
            gap: 16px;
        }
        
        .search-filter-container {
            order: 3;
            margin-left: 0;
            max-width: 100%;
        }
        
        .category-tabs {
            order: 2;
            width: 100%;
        }
        
        .food-card {
            width: calc(50% - 12px);
        }
    }
    
    @@media (max-width: 768px) {
        .order-header {
            position: relative;
            padding: 16px 0;
        }
        
        .food-card {
            width: 100%;
        }
        
        .search-filter-container {
            position: sticky;
            top: 0;
            z-index: 101;
            background: var(--bg-color);
            padding: 12px 0;
        }
    }
    
    /* New Allergen Filters styling */
    .allergen-filters {
        margin-bottom: 24px;
        background-color: var(--secondary-bg-color, #1F1D2B);
        border-radius: 16px;
        padding: 16px;
    }
    
    .allergen-filters-title {
        font-size: 16px;
        font-weight: 500;
        margin: 0 0 12px 0;
        color: var(--text-color);
    }
    
    .allergen-icons-container {
        display: flex;
        gap: 12px;
        flex-wrap: wrap;
    }
    
    .allergen-filter {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 8px;
        cursor: pointer;
        transition: all 0.3s ease;
        padding: 8px;
        border-radius: 12px;
        width: 80px;
    }
    
    .allergen-filter:hover {
        background-color: rgba(255, 255, 255, 0.05);
    }
    
    .allergen-icon {
        width: 48px;
        height: 48px;
        background-color: rgba(234, 124, 105, 0.1);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative;
    }
    
    .allergen-icon i {
        font-size: 24px;
        color: var(--accent-color, #EA7C69);
    }
    
    .allergen-name {
        font-size: 12px;
        color: var(--text-color);
        text-align: center;
    }
    
    .allergen-filter.excluded .allergen-icon {
        background-color: rgba(255, 59, 59, 0.1);
    }
    
    .allergen-filter.excluded .allergen-icon i {
        color: #FF3B3B;
    }
    
    .allergen-filter.excluded .allergen-icon::after {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='48' height='48' viewBox='0 0 24 24'%3E%3Cpath d='M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z' fill='%23FF3B3B'/%3E%3C/svg%3E");
        background-size: 24px;
        background-position: center;
        background-repeat: no-repeat;
        opacity: 0.8;
    }
    
    .allergen-filter.excluded .allergen-name {
        color: #FF3B3B;
    }
    
    /* Food allergen tags */
    .food-allergen-tags {
        position: absolute;
        bottom: 12px;
        right: 12px;
        display: flex;
        gap: 4px;
    }
    
    .food-allergen-tag {
        background-color: rgba(0, 0, 0, 0.7);
        color: #fff;
        border-radius: 4px;
        padding: 4px;
        font-size: 12px;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .food-allergen-tag.more {
        background-color: rgba(234, 124, 105, 0.7);
    }
    
    /* Improved checkout button styles */
    .checkout-btn {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 8px;
        background-color: var(--accent-color, #EA7C69);
        color: #fff;
        padding: 14px;
        border-radius: 8px;
        font-weight: 600;
        text-align: center;
        text-decoration: none;
        cursor: pointer;
        transition: all 0.3s ease;
        margin-top: 16px;
        box-shadow: 0 8px 24px rgba(234, 124, 105, 0.3);
    }
    
    .checkout-btn:not(.disabled):hover {
        background-color: #d66c5a;
        transform: translateY(-2px);
    }
    
    .checkout-btn:not(.disabled):active {
        transform: translateY(0);
    }
    
    .checkout-btn.disabled {
        background-color: var(--dark-bg-color);
        color: var(--text-muted);
        cursor: not-allowed;
        box-shadow: none;
        pointer-events: none;
    }
    
    /* Animation for checkout button when first item is added */
    @@keyframes pulse {
        0% {
            transform: scale(1);
        }
        50% {
            transform: scale(1.05);
        }
        100% {
            transform: scale(1);
        }
    }
    
    .pulse-animation {
        animation: pulse 0.5s ease-in-out 3;
    }
</style>

@section Scripts {
    <script>
        // Notification Functions
        function showNotification(message, type = 'success') {
            const notification = document.getElementById('notification');
            const messageEl = notification.querySelector('.notification-message');
            const iconContainer = notification.querySelector('.notification-icon-container');
            const icon = notification.querySelector('.notification-icon');
            const checkmark = notification.querySelector('.checkmark-svg');
            
            // Set message and type
            messageEl.textContent = message;
            
            // Set icon based on type
            if (type === 'success') {
                icon.className = 'notification-icon bx bx-check';
                checkmark.style.display = 'block';
                notification.classList.add('success');
            } else {
                icon.className = 'notification-icon bx bx-error';
                checkmark.style.display = 'none';
                notification.classList.add('error');
            }
            
            // Show notification
            notification.classList.add('show');
            
            // Auto hide after 3 seconds
            setTimeout(() => {
                hideNotification();
            }, 3000);
        }
        
        function hideNotification() {
            const notification = document.getElementById('notification');
            notification.classList.remove('show');
        }
        
        // Close button handler
        document.querySelector('.notification-close').addEventListener('click', hideNotification);
        
        // Handle search input
        const searchInput = document.getElementById('searchInput');
        const categoryFilter = document.getElementById('categoryFilter');
        
        // Apply filters when Enter key is pressed in search input
        searchInput.addEventListener('keyup', function(e) {
            if (e.key === 'Enter') {
                applyFilters();
            }
        });
        
        // Apply filters when category selection changes
        categoryFilter.addEventListener('change', function() {
            applyFilters();
        });
        
        // Function to clear search field and apply filters
        function clearSearch() {
            searchInput.value = '';
            applyFilters();
        }
        
        // Allergen filtering
        let excludedAllergens = [@string.Join(",", Model.ExcludedAllergenIds)];
        
        // Function to toggle allergen filter selection
        function toggleAllergenFilter(allergenId) {
            const index = excludedAllergens.indexOf(allergenId);
            if (index > -1) {
                // Remove allergen from excluded list if it's already there
                excludedAllergens.splice(index, 1);
            } else {
                // Add allergen to excluded list
                excludedAllergens.push(allergenId);
            }
            
            // Apply updated filters
            applyFilters();
        }
        
        // Function to apply all filters (search, category, allergens)
        function applyFilters() {
            const searchTerm = searchInput.value;
            const categoryId = categoryFilter.value;
            const allergenParam = excludedAllergens.length > 0 ? `&excludeAllergens=${excludedAllergens.join(',')}` : '';
            
            // Build URL with all filter parameters
            const url = `?searchTerm=${encodeURIComponent(searchTerm)}${categoryId ? `&categoryId=${categoryId}` : ''}${allergenParam}`;
            window.location.href = url;
        }
        
        // Function to handle adding items to cart
        function addToCartSubmit(event, foodId) {
            event.preventDefault();
            const form = event.target;
            const quantityInput = form.querySelector('.quantity-input');
            const quantity = parseInt(quantityInput.value) || 1;
            
            // Get CSRF token
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
            
            // Send AJAX request to add item to cart
            fetch(`?handler=AddToCart`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': token
                },
                body: `foodId=${foodId}&quantity=${quantity}`
            })
            .then(response => {
                if (response.ok) {
                    // Show success notification
                    showNotification('Item added to cart successfully');
                    
                    // Add animation to the food card
                    const foodCard = document.querySelector(`.food-card[data-id="${foodId}"]`);
                    foodCard.classList.add('added-to-cart');
                    setTimeout(() => {
                        foodCard.classList.remove('added-to-cart');
                    }, 700);
                    
                    // Reload page to show updated cart
                    setTimeout(() => {
                        window.location.reload();
                    }, 700);
                } else {
                    throw new Error('Failed to add item to cart');
                }
            })
            .catch(error => {
                console.error('Error adding to cart:', error);
                showNotification('Failed to add item to cart. Please try again.', 'error');
            });
            
            return false;
        }
    </script>
}
