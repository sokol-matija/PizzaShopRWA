@page
@model PizzaShopWebApp.Pages.Dashboard.DashboardIndexModel
@{
    ViewData["Title"] = "Dashboard";
    Layout = "_DashboardLayout";
}

<div class="dashboard-header">
    <div class="header-content">
        <h1>Dashboard Overview</h1>
        <p class="date">@Model.CurrentDate</p>
    </div>
    <div class="header-actions">
        <div class="search-bar">
            <i class="bx bx-search"></i>
            <input type="text" placeholder="Search orders, customers..." />
        </div>
        <button class="refresh-btn">
            <i class="bx bx-refresh"></i>
            Refresh
        </button>
    </div>
</div>

<!-- Stats Cards -->
<div class="stats-grid">
    <!-- Today's Revenue -->
    <div class="stats-card">
        <div class="stats-header">
            <div class="stats-icon revenue">
                <i class='bx bx-dollar'></i>
            </div>
            <div class="stats-change @(Model.RevenueChangePercent >= 0 ? "positive" : "negative")">
                @(Model.RevenueChangePercent >= 0 ? "+" : "")@Model.RevenueChangePercent.ToString("0.00")% 
                <i class='bx @(Model.RevenueChangePercent >= 0 ? "bx-up-arrow-alt" : "bx-down-arrow-alt")'></i>
            </div>
        </div>
        <div class="stats-value">$@Model.TodayRevenue.ToString("N2")</div>
        <div class="stats-label">Today's Revenue</div>
    </div>
    
    <!-- Today's Orders -->
    <div class="stats-card">
        <div class="stats-header">
            <div class="stats-icon orders">
                <i class='bx bx-receipt'></i>
            </div>
            <div class="stats-change @(Model.OrdersChangePercent >= 0 ? "positive" : "negative")">
                @(Model.OrdersChangePercent >= 0 ? "+" : "")@Model.OrdersChangePercent.ToString("0.00")% 
                <i class='bx @(Model.OrdersChangePercent >= 0 ? "bx-up-arrow-alt" : "bx-down-arrow-alt")'></i>
            </div>
        </div>
        <div class="stats-value">@Model.TodayOrders</div>
        <div class="stats-label">Today's Orders</div>
    </div>
    
    <!-- Today's Customers -->
    <div class="stats-card">
        <div class="stats-header">
            <div class="stats-icon customers">
                <i class='bx bx-user'></i>
            </div>
            <div class="stats-change @(Model.CustomersChangePercent >= 0 ? "positive" : "negative")">
                @(Model.CustomersChangePercent >= 0 ? "+" : "")@Model.CustomersChangePercent.ToString("0.00")% 
                <i class='bx @(Model.CustomersChangePercent >= 0 ? "bx-up-arrow-alt" : "bx-down-arrow-alt")'></i>
            </div>
        </div>
        <div class="stats-value">@Model.TodayCustomers</div>
        <div class="stats-label">Today's Customers</div>
    </div>
</div>

<!-- Charts Grid -->
<div class="charts-grid">
    <!-- Weekly Sales Trend -->
    <div class="chart-card">
        <div class="chart-header">
            <h3>Weekly Sales Trend</h3>
            <div class="chart-actions">
                <button class="chart-action-btn active">Week</button>
                <button class="chart-action-btn">Month</button>
                <button class="chart-action-btn">Year</button>
            </div>
        </div>
        <div class="chart-container">
            <canvas id="weeklySalesChart"></canvas>
        </div>
    </div>

    <!-- Food Category Distribution -->
    <div class="chart-container">
        <h3>Food Category Distribution</h3>
        <canvas id="categoryDistributionChart"></canvas>
    </div>
</div>

<!-- Recent Orders & Popular Items Grid -->
<div class="orders-popular-grid">
    <!-- Recent Orders -->
    <div class="orders-card">
        <div class="card-header">
            <h3>Recent Orders</h3>
            <button class="view-all-btn">View All</button>
        </div>
        <div class="orders-table-container">
            <table class="orders-table">
                <thead>
                    <tr>
                        <th>Order #</th>
                        <th>Items</th>
                        <th>Total</th>
                        <th>Status</th>
                        <th>Time</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var order in Model.RecentOrders)
                    {
                        <tr>
                            <td>#@order.OrderNumber</td>
                            <td>
                                @if (order.Items.Any())
                                {
                                    @order.Items.First().FoodName
                                    @if (order.Items.Count > 1)
                                    {
                                        <span class="more-items">+@(order.Items.Count - 1)</span>
                                    }
                                }
                            </td>
                            <td>$@order.TotalAmount.ToString("N2")</td>
                            <td>
                                <span class="status-badge @Model.GetStatusClass(order.Status)">
                                    @order.Status
                                </span>
                            </td>
                            <td>@order.OrderDate.ToString("HH:mm")</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <!-- Popular Items -->
    <div class="popular-items">
        <h3>Popular Items</h3>
        <div class="popular-items-grid">
            @foreach (var item in Model.MostOrderedItems)
            {
                <div class="popular-item">
                    <div class="popular-item-image">
                        <img src="@(string.IsNullOrEmpty(item.ImageUrl) ? "/images/placeholder-food.jpg" : item.ImageUrl)" 
                             alt="@item.Name"
                             onerror="this.src='/images/placeholder-food.jpg'">
                    </div>
                    <div class="popular-item-info">
                        <h4>@item.Name</h4>
                        <p>@item.Description</p>
                        <span class="price">$@item.Price.ToString("0.00")</span>
                        <span class="category">@item.FoodCategoryName</span>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Order Status & Time Distribution Grid -->
<div class="status-time-grid">
    <!-- Order Status Distribution -->
    <div class="status-card">
        <div class="card-header">
            <h3>Order Status Distribution</h3>
            <button class="view-all-btn">View Details</button>
        </div>
        <div class="status-list">
            @foreach (var status in Model.OrderStatusDistribution)
            {
                <div class="status-item">
                    <div class="status-info">
                        <span class="status-name">@status.Key</span>
                        <span class="status-count">@status.Value orders</span>
                    </div>
                    <div class="status-bar">
                        <div class="status-progress" style="width: @(Model.OrderStatusDistribution.Values.Max() > 0 ? (status.Value * 100 / Model.OrderStatusDistribution.Values.Max()) : 0)%"></div>
                    </div>
                </div>
            }
        </div>
    </div>

    <!-- Orders by Time of Day -->
    <div class="time-distribution-card">
        <div class="card-header">
            <h3>Orders by Time of Day</h3>
            <button class="view-all-btn">View Details</button>
        </div>
        <div class="time-distribution-list">
            @foreach (var timeSlot in Model.OrdersByTimeOfDay)
            {
                <div class="time-slot-item">
                    <div class="time-slot-info">
                        <span class="time-slot-name">@timeSlot.Key</span>
                        <span class="time-slot-count">@timeSlot.Value orders</span>
                    </div>
                    <div class="time-slot-bar">
                        <div class="time-slot-progress" style="width: @(Model.OrdersByTimeOfDay.Values.Max() > 0 ? (timeSlot.Value * 100 / Model.OrdersByTimeOfDay.Values.Max()) : 0)%"></div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Weekly Sales Chart
        const weeklySalesCtx = document.getElementById('weeklySalesChart').getContext('2d');
        new Chart(weeklySalesCtx, {
            type: 'line',
            data: {
                labels: @Html.Raw(Json.Serialize(Model.WeeklySalesTrend.Keys)),
                datasets: [{
                    label: 'Daily Revenue',
                    data: @Html.Raw(Json.Serialize(Model.WeeklySalesTrend.Values)),
                    borderColor: '#EA7C69',
                    backgroundColor: 'rgba(234, 124, 105, 0.1)',
                    tension: 0.4,
                    fill: true
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        grid: {
                            color: 'rgba(255, 255, 255, 0.1)'
                        },
                        ticks: {
                            color: '#ABBBC2'
                        }
                    },
                    x: {
                        grid: {
                            display: false
                        },
                        ticks: {
                            color: '#ABBBC2'
                        }
                    }
                }
            }
        });

        // Food Category Distribution Chart
        var categoryCtx = document.getElementById('categoryDistributionChart').getContext('2d');
        new Chart(categoryCtx, {
            type: 'doughnut',
            data: {
                labels: @Html.Raw(Json.Serialize(Model.OrderTypeDistribution.Keys)),
                datasets: [{
                    data: @Html.Raw(Json.Serialize(Model.OrderTypeDistribution.Values)),
                    backgroundColor: [
                        '#FF6B6B',
                        '#4ECDC4',
                        '#45B7D1',
                        '#96CEB4',
                        '#FFEEAD'
                    ]
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'bottom'
                    }
                }
            }
        });
    </script>
} 