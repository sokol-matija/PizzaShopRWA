@page "{id:int?}"
@model PizzaShopWebApp.Pages.Dashboard.Menu.EditItemModel
@{
    ViewData["Title"] = Model.IsNewItem ? "Add New Item" : "Edit Item";
    Layout = "_DashboardLayout";
}

<div class="edit-item-container">
    <div class="header-section">
        <div class="title-with-back">
            <a href="/Dashboard/Menu" class="back-button">
                <i class='bx bx-arrow-back'></i>
            </a>
            <h1>@(Model.IsNewItem ? "Add New Dish" : "Edit Dish")</h1>
        </div>
        
        @if (!Model.IsNewItem)
        {
            <div class="item-actions">
                <button type="button" id="deleteItemBtn" class="delete-item-btn">
                    <i class='bx bx-trash'></i>
                    Delete Dish
                </button>
            </div>
        }
    </div>
    
    @if (!string.IsNullOrEmpty(TempData["ErrorMessage"]?.ToString()))
    {
        <div class="alert alert-danger">
            <i class='bx bx-error-circle'></i>
            @TempData["ErrorMessage"]
        </div>
    }
    
    <form method="post" enctype="multipart/form-data" class="edit-form" id="editItemForm">
        <input type="hidden" asp-for="MenuItem.Id" />
        
        <div class="form-layout">
            <div class="form-main">
                <div class="form-card">
                    <h2 class="form-card-title">Basic Information</h2>
                    
                    <div class="form-group">
                        <label asp-for="MenuItem.Name">Dish Name</label>
                        <input asp-for="MenuItem.Name" class="form-control" required />
                        <span asp-validation-for="MenuItem.Name" class="validation-error"></span>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label asp-for="MenuItem.Price">Price ($)</label>
                            <input asp-for="MenuItem.Price" class="form-control" type="number" step="0.01" min="0" required />
                            <span asp-validation-for="MenuItem.Price" class="validation-error"></span>
                        </div>
                        
                        <div class="form-group">
                            <label asp-for="MenuItem.FoodCategoryId">Category</label>
                            <select asp-for="MenuItem.FoodCategoryId" class="form-control" required>
                                <option value="">Select a category</option>
                                @foreach (var category in Model.Categories)
                                {
                                    <option value="@category.Id">@category.Name</option>
                                }
                            </select>
                            <span asp-validation-for="MenuItem.FoodCategoryId" class="validation-error"></span>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label asp-for="MenuItem.Description">Description</label>
                        <textarea asp-for="MenuItem.Description" class="form-control" rows="3"></textarea>
                        <span asp-validation-for="MenuItem.Description" class="validation-error"></span>
                    </div>
                    
                    <div class="form-group">
                        <label asp-for="MenuItem.PreparationTime">Preparation Time (minutes)</label>
                        <input asp-for="MenuItem.PreparationTime" class="form-control" type="number" min="1" />
                        <span asp-validation-for="MenuItem.PreparationTime" class="validation-error"></span>
                    </div>
                </div>
                
                <div class="form-card">
                    <h2 class="form-card-title">Allergens</h2>
                    <p class="helper-text">Select all allergens that apply to this dish</p>
                    
                    <div class="allergens-grid">
                        @foreach (var allergen in Model.Allergens)
                        {
                            <label class="allergen-chip @(Model.SelectedAllergenIds.Contains(allergen.Id) ? "selected" : "")">
                                <input type="checkbox" name="SelectedAllergens" value="@allergen.Id" 
                                       @(Model.SelectedAllergenIds.Contains(allergen.Id) ? "checked" : "") />
                                <span class="allergen-icon">
                                    @switch (allergen.Name.ToLower())
                                    {
                                        case "gluten":
                                            <i class='bx bx-cookie'></i>
                                            break;
                                        case "dairy":
                                            <i class='bx bxs-drink'></i>
                                            break;
                                        case "nuts":
                                            <i class='bx bx-food-menu'></i>
                                            break;
                                        case "soy":
                                            <i class='bx bx-food-tag'></i>
                                            break;
                                        case "shellfish":
                                            <i class='bx bx-bowl-hot'></i>
                                            break;
                                        case "eggs":
                                            <i class='bx bx-dish'></i>
                                            break;
                                        default:
                                            <i class='bx bx-food-tag'></i>
                                            break;
                                    }
                                </span>
                                <span class="allergen-name">@allergen.Name</span>
                            </label>
                        }
                    </div>
                </div>
            </div>
            
            <div class="form-sidebar">
                <div class="form-card">
                    <h2 class="form-card-title">Dish Image</h2>
                    
                    <div class="image-upload-container">
                        <div class="image-preview-wrapper">
                            <img id="imagePreview" src="@(string.IsNullOrEmpty(Model.MenuItem.ImageUrl) ? "/Images/basic_food_image.png" : Model.MenuItem.ImageUrl)" alt="Dish preview" />
                            <div class="image-hover-overlay">
                                <div class="overlay-content">
                                    <i class='bx bx-upload'></i>
                                    <span>Change Image</span>
                                </div>
                            </div>
                        </div>
                        
                        <input type="file" id="imageFile" name="ImageFile" class="hidden-file-input" accept="image/*" />
                        <input type="hidden" asp-for="RemoveImage" id="removeImageInput" />
                        
                        <div class="image-actions">
                            <button type="button" class="image-action-btn upload-btn" id="triggerUpload">
                                <i class='bx bx-upload'></i>
                                Upload
                            </button>
                            <button type="button" class="image-action-btn remove-btn" id="removeImageBtn">
                                <i class='bx bx-trash'></i>
                                Remove
                            </button>
                        </div>
                        
                        <div class="image-info">
                            <p class="image-help">Recommended size: 500Ã—500 pixels</p>
                            <p class="image-help">Max size: 5MB</p>
                        </div>
                    </div>
                </div>
                
                <div class="form-actions">
                    <a href="/Dashboard/Menu" class="btn-cancel">Cancel</a>
                    <button type="submit" class="btn-save">@(Model.IsNewItem ? "Create Dish" : "Save Changes")</button>
                </div>
            </div>
        </div>
    </form>
</div>

<!-- Delete Confirmation Modal -->
<div id="deleteConfirmModal" class="modal">
    <div class="modal-content">
        <h2>Delete Dish</h2>
        <p>Are you sure you want to delete this dish? This action cannot be undone.</p>
        <div class="modal-actions">
            <button id="cancelDeleteBtn" class="btn-cancel">Cancel</button>
            <form method="post" asp-page-handler="Delete">
                <input type="hidden" name="id" value="@Model.MenuItem.Id" />
                <button type="submit" class="btn-delete">Delete Dish</button>
            </form>
        </div>
    </div>
</div>

<!-- Notification Container -->
<div id="notificationContainer" class="notification-container">
    <div class="notification-content">
        <div class="notification-icon">
            <svg class="checkmark" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 52 52">
                <circle class="checkmark__circle" cx="26" cy="26" r="25" fill="none"/>
                <path class="checkmark__check" fill="none" d="M14.1 27.2l7.1 7.2 16.7-16.8"/>
            </svg>
        </div>
        <div class="notification-message"></div>
        <button class="notification-close">
            <i class='bx bx-x'></i>
        </button>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Notification Functions
            function showNotification(message, type = 'success') {
                const container = document.getElementById('notificationContainer');
                const content = container.querySelector('.notification-content');
                const messageEl = container.querySelector('.notification-message');
                const icon = container.querySelector('.notification-icon');
                
                // Set message and type
                messageEl.textContent = message;
                content.className = `notification-content ${type}`;
                
                // Show notification
                container.classList.add('show');
                
                // Auto hide after 3 seconds
                setTimeout(() => {
                    hideNotification();
                }, 3000);
            }
            
            function hideNotification() {
                const container = document.getElementById('notificationContainer');
                container.classList.remove('show');
            }
            
            // Close button handler
            document.querySelector('.notification-close').addEventListener('click', hideNotification);
            
            // Image Preview Functionality
            const imageFile = document.getElementById('imageFile');
            const imagePreview = document.getElementById('imagePreview');
            const triggerUpload = document.getElementById('triggerUpload');
            const removeImageBtn = document.getElementById('removeImageBtn');
            const removeImageInput = document.getElementById('removeImageInput');
            const imagePreviewWrapper = document.querySelector('.image-preview-wrapper');
            
            // Trigger file input when upload button or image is clicked
            triggerUpload.addEventListener('click', function() {
                imageFile.click();
            });
            
            imagePreviewWrapper.addEventListener('click', function() {
                imageFile.click();
            });
            
            // Handle file selection
            imageFile.addEventListener('change', function() {
                if (this.files && this.files[0]) {
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        imagePreview.src = e.target.result;
                        imagePreview.style.opacity = 1;
                        removeImageInput.value = "false";
                        showNotification('Image selected successfully');
                    };
                    reader.readAsDataURL(this.files[0]);
                }
            });
            
            // Remove image button
            removeImageBtn.addEventListener('click', function() {
                imagePreview.src = "/Images/basic_food_image.png";
                imageFile.value = "";
                removeImageInput.value = "true";
                showNotification('Image removed successfully');
            });
            
            // Allergen chip selection
            const allergenChips = document.querySelectorAll('.allergen-chip');
            allergenChips.forEach(chip => {
                chip.addEventListener('click', function() {
                    const checkbox = this.querySelector('input[type="checkbox"]');
                    checkbox.checked = !checkbox.checked;
                    this.classList.toggle('selected', checkbox.checked);
                });
            });
            
            // Delete confirmation modal
            const deleteItemBtn = document.getElementById('deleteItemBtn');
            const deleteConfirmModal = document.getElementById('deleteConfirmModal');
            const cancelDeleteBtn = document.getElementById('cancelDeleteBtn');
            
            if (deleteItemBtn) {
                deleteItemBtn.addEventListener('click', function() {
                    deleteConfirmModal.style.display = 'flex';
                });
            }
            
            if (cancelDeleteBtn) {
                cancelDeleteBtn.addEventListener('click', function() {
                    deleteConfirmModal.style.display = 'none';
                });
            }
            
            // Close modal when clicking outside
            window.addEventListener('click', function(event) {
                if (event.target === deleteConfirmModal) {
                    deleteConfirmModal.style.display = 'none';
                }
            });

            // Form submission
            const form = document.getElementById('editItemForm');
            form.addEventListener('submit', function(e) {
                e.preventDefault();
                
                // Create FormData object
                const formData = new FormData(this);
                
                // Submit form using fetch
                fetch(this.action, {
                    method: 'POST',
                    body: formData
                })
                .then(response => {
                    if (response.ok) {
                        showNotification('Item saved successfully');
                        // Redirect after a short delay
                        setTimeout(() => {
                            window.location.href = '/Dashboard/Menu';
                        }, 1500);
                    } else {
                        throw new Error('Failed to save item');
                    }
                })
                .catch(error => {
                    showNotification('Error saving item: ' + error.message, 'error');
                });
            });
        });
    </script>
}

<style>
    /* Edit Item Container */
    .edit-item-container {
        padding: 24px;
        font-family: 'Poppins', sans-serif;
    }
    
    /* Header Section */
    .header-section {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 24px;
    }
    
    .title-with-back {
        display: flex;
        align-items: center;
        gap: 12px;
    }
    
    .back-button {
        color: var(--text-color, #fff);
        font-size: 20px;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 40px;
        height: 40px;
        background-color: rgba(255, 255, 255, 0.05);
        border-radius: 8px;
        text-decoration: none;
        transition: all 0.3s ease;
    }
    
    .back-button:hover {
        background-color: rgba(255, 255, 255, 0.1);
    }
    
    .header-section h1 {
        font-size: 28px;
        font-weight: 600;
        color: var(--text-color, #fff);
        margin: 0;
    }
    
    .delete-item-btn {
        display: flex;
        align-items: center;
        gap: 8px;
        background-color: rgba(231, 76, 60, 0.1);
        border: 1px solid rgba(231, 76, 60, 0.2);
        color: #e74c3c;
        padding: 8px 16px;
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.3s ease;
    }
    
    .delete-item-btn:hover {
        background-color: rgba(231, 76, 60, 0.2);
    }
    
    /* Form Layout */
    .form-layout {
        display: grid;
        grid-template-columns: 1fr 350px;
        gap: 24px;
    }
    
    .form-main {
        display: flex;
        flex-direction: column;
        gap: 24px;
    }
    
    .form-sidebar {
        display: flex;
        flex-direction: column;
        gap: 24px;
    }
    
    /* Form Cards */
    .form-card {
        background-color: var(--secondary-bg-color, #1F1D2B);
        border-radius: 16px;
        padding: 24px;
    }
    
    .form-card-title {
        font-size: 18px;
        font-weight: 600;
        color: var(--text-color, #fff);
        margin: 0 0 16px 0;
    }
    
    .helper-text {
        color: var(--text-muted, #ABBBC2);
        font-size: 14px;
        margin: -12px 0 16px 0;
    }
    
    /* Form Controls */
    .form-group {
        margin-bottom: 20px;
        position: relative;
    }
    
    .form-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 16px;
        margin-bottom: 20px;
    }
    
    .form-group label {
        display: block;
        margin-bottom: 8px;
        color: var(--text-color, #fff);
        font-weight: 500;
        font-size: 14px;
    }
    
    .form-control {
        width: 100%;
        padding: 12px 16px;
        border-radius: 8px;
        background-color: rgba(255, 255, 255, 0.05);
        border: 1px solid rgba(255, 255, 255, 0.1);
        color: var(--text-color, #fff);
        font-size: 14px;
        transition: all 0.3s ease;
        box-sizing: border-box;
    }
    
    .form-control:focus {
        border-color: var(--accent-color, #EA7C69);
        outline: none;
        box-shadow: 0 0 0 3px rgba(234, 124, 105, 0.25);
    }

    /* Style for select elements */
    select.form-control {
        appearance: none;
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='%23ABBBC2' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");
        background-repeat: no-repeat;
        background-position: right 12px center;
        padding-right: 40px;
    }

    /* Style for number input */
    input[type="number"].form-control {
        -moz-appearance: textfield;
    }

    input[type="number"].form-control::-webkit-outer-spin-button,
    input[type="number"].form-control::-webkit-inner-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }
    
    /* Toggle Switches */
    .checkbox-container {
        display: flex;
        flex-direction: column;
    }
    
    .checkbox-label {
        margin-bottom: 16px;
    }
    
    .property-toggles {
        display: flex;
        flex-direction: column;
        gap: 12px;
    }
    
    .toggle-switch {
        display: flex;
        align-items: center;
        cursor: pointer;
    }
    
    .toggle-switch input {
        opacity: 0;
        width: 0;
        height: 0;
    }
    
    .toggle-slider {
        position: relative;
        display: inline-block;
        width: 40px;
        height: 20px;
        background-color: rgba(255, 255, 255, 0.1);
        border-radius: 20px;
        margin-right: 10px;
        transition: all 0.3s ease;
    }
    
    .toggle-slider:before {
        position: absolute;
        content: "";
        height: 16px;
        width: 16px;
        left: 2px;
        bottom: 2px;
        background-color: white;
        border-radius: 50%;
        transition: all 0.3s ease;
    }
    
    .toggle-switch input:checked + .toggle-slider {
        background-color: var(--accent-color, #EA7C69);
    }
    
    .toggle-switch input:checked + .toggle-slider:before {
        transform: translateX(20px);
    }
    
    .toggle-label {
        color: var(--text-color, #fff);
    }
    
    /* Validation Errors */
    .validation-error {
        color: #e74c3c;
        font-size: 12px;
        margin-top: 4px;
        display: block;
    }
    
    /* Alert */
    .alert {
        padding: 16px;
        border-radius: 8px;
        margin-bottom: 24px;
        display: flex;
        align-items: center;
        gap: 12px;
    }
    
    .alert-danger {
        background-color: rgba(231, 76, 60, 0.1);
        border: 1px solid rgba(231, 76, 60, 0.2);
        color: #e74c3c;
    }
    
    /* Allergens Grid */
    .allergens-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
        gap: 12px;
    }
    
    .allergen-chip {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 8px;
        padding: 12px;
        background-color: rgba(255, 255, 255, 0.05);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.3s ease;
    }
    
    .allergen-chip input {
        display: none;
    }
    
    .allergen-icon {
        width: 40px;
        height: 40px;
        background-color: rgba(255, 255, 255, 0.08);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .allergen-icon i {
        font-size: 20px;
        color: var(--text-muted, #ABBBC2);
    }
    
    .allergen-name {
        font-size: 12px;
        color: var(--text-color, #fff);
    }
    
    .allergen-chip.selected {
        background-color: rgba(234, 124, 105, 0.1);
        border-color: var(--accent-color, #EA7C69);
    }
    
    .allergen-chip.selected .allergen-icon {
        background-color: rgba(234, 124, 105, 0.2);
    }
    
    .allergen-chip.selected .allergen-icon i {
        color: var(--accent-color, #EA7C69);
    }
    
    /* Image Upload */
    .image-upload-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 16px;
    }
    
    .image-preview-wrapper {
        width: 200px;
        height: 200px;
        border-radius: 16px;
        overflow: hidden;
        position: relative;
        cursor: pointer;
    }
    
    .image-preview-wrapper img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: all 0.3s ease;
    }
    
    .image-hover-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        opacity: 0;
        transition: all 0.3s ease;
    }
    
    .overlay-content {
        display: flex;
        flex-direction: column;
        align-items: center;
        color: white;
    }
    
    .overlay-content i {
        font-size: 32px;
        margin-bottom: 8px;
    }
    
    .image-preview-wrapper:hover .image-hover-overlay {
        opacity: 1;
    }
    
    .hidden-file-input {
        display: none;
    }
    
    .image-actions {
        display: flex;
        gap: 8px;
    }
    
    .image-action-btn {
        display: flex;
        align-items: center;
        gap: 8px;
        padding: 8px 16px;
        border-radius: 8px;
        cursor: pointer;
        font-size: 14px;
        transition: all 0.3s ease;
    }
    
    .upload-btn {
        background-color: rgba(234, 124, 105, 0.1);
        border: 1px solid rgba(234, 124, 105, 0.2);
        color: var(--accent-color, #EA7C69);
    }
    
    .upload-btn:hover {
        background-color: rgba(234, 124, 105, 0.2);
    }
    
    .remove-btn {
        background-color: rgba(231, 76, 60, 0.1);
        border: 1px solid rgba(231, 76, 60, 0.2);
        color: #e74c3c;
    }
    
    .remove-btn:hover {
        background-color: rgba(231, 76, 60, 0.2);
    }
    
    .image-info {
        display: flex;
        flex-direction: column;
        align-items: center;
    }
    
    .image-help {
        font-size: 12px;
        color: var(--text-muted, #ABBBC2);
        margin: 4px 0;
    }
    
    /* Form Actions */
    .form-actions {
        display: flex;
        gap: 12px;
        margin-top: auto;
    }
    
    .btn-cancel {
        flex: 1;
        background: none;
        border: 1px solid rgba(255, 255, 255, 0.1);
        color: var(--text-color, #fff);
        padding: 12px;
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.3s ease;
        text-align: center;
        text-decoration: none;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .btn-cancel:hover {
        background-color: rgba(255, 255, 255, 0.05);
    }
    
    .btn-save {
        flex: 1;
        background-color: var(--accent-color, #EA7C69);
        color: white;
        border: none;
        padding: 12px;
        border-radius: 8px;
        cursor: pointer;
        font-weight: 500;
        transition: all 0.3s ease;
    }
    
    .btn-save:hover {
        background-color: #d66c5a;
        transform: translateY(-2px);
    }
    
    /* Delete Confirmation Modal */
    .modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.7);
        z-index: 1000;
        justify-content: center;
        align-items: center;
    }
    
    .modal-content {
        background-color: var(--secondary-bg-color, #1F1D2B);
        padding: 24px;
        border-radius: 16px;
        width: 90%;
        max-width: 400px;
    }
    
    .modal-content h2 {
        font-size: 20px;
        font-weight: 600;
        margin: 0 0 16px 0;
        color: var(--text-color, #fff);
    }
    
    .modal-content p {
        margin: 0 0 24px 0;
        color: var(--text-muted, #ABBBC2);
    }
    
    .modal-actions {
        display: flex;
        gap: 12px;
    }
    
    .btn-delete {
        flex: 1;
        background-color: #e74c3c;
        color: white;
        border: none;
        padding: 12px;
        border-radius: 8px;
        cursor: pointer;
        font-weight: 500;
        transition: all 0.3s ease;
    }
    
    .btn-delete:hover {
        background-color: #c0392b;
    }
    
    /* Responsive Design */
    @@media (max-width: 992px) {
        .form-layout {
            grid-template-columns: 1fr;
        }
        
        .form-row {
            grid-template-columns: 1fr;
        }
    }

    /* Notification Styles */
    .notification-container {
        position: fixed;
        bottom: 24px;
        right: 24px;
        z-index: 1000;
        transform: translateY(100px);
        opacity: 0;
        transition: all 0.3s ease;
    }

    .notification-container.show {
        transform: translateY(0);
        opacity: 1;
    }

    .notification-content {
        display: flex;
        align-items: center;
        gap: 12px;
        padding: 16px 24px;
        background-color: var(--secondary-bg-color, #1F1D2B);
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        border: 1px solid rgba(255, 255, 255, 0.1);
        min-width: 300px;
        max-width: 400px;
    }

    .notification-content.success {
        border-left: 4px solid #2ecc71;
    }

    .notification-content.error {
        border-left: 4px solid #e74c3c;
    }

    .notification-icon {
        width: 24px;
        height: 24px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .notification-message {
        flex: 1;
        color: var(--text-color, #fff);
        font-size: 14px;
    }

    .notification-close {
        background: none;
        border: none;
        color: var(--text-muted, #ABBBC2);
        cursor: pointer;
        padding: 4px;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: color 0.3s ease;
    }

    .notification-close:hover {
        color: var(--text-color, #fff);
    }

    /* Checkmark Animation */
    .checkmark {
        width: 24px;
        height: 24px;
        border-radius: 50%;
        display: block;
        stroke-width: 2;
        stroke: #2ecc71;
        stroke-miterlimit: 10;
        box-shadow: inset 0px 0px 0px #2ecc71;
        animation: fill .4s ease-in-out .4s forwards, scale .3s ease-in-out .9s both;
    }

    .checkmark__circle {
        stroke-dasharray: 166;
        stroke-dashoffset: 166;
        stroke-width: 2;
        stroke-miterlimit: 10;
        stroke: #2ecc71;
        fill: none;
        animation: stroke 0.6s cubic-bezier(0.65, 0, 0.45, 1) forwards;
    }

    .checkmark__check {
        transform-origin: 50% 50%;
        stroke-dasharray: 48;
        stroke-dashoffset: 48;
        animation: stroke 0.3s cubic-bezier(0.65, 0, 0.45, 1) 0.8s forwards;
    }

    @@keyframes stroke {
        100% {
            stroke-dashoffset: 0;
        }
    }

    @@keyframes scale {
        0%, 100% {
            transform: none;
        }
        50% {
            transform: scale3d(1.1, 1.1, 1);
        }
    }

    @@keyframes fill {
        100% {
            box-shadow: inset 0px 0px 0px 30px #2ecc71;
        }
    }
</style> 