@page
@model WebApp.Pages.Admin.Guides.IndexModel
@{
    ViewData["Title"] = "Manage Guides";
}

<style>
    /* Disable all hover effects on guides page */
    .dark-theme-card:hover {
        border-color: inherit !important;
        box-shadow: inherit !important;
        transform: none !important;
    }
    
    .dark-theme-card:hover::before {
        opacity: inherit !important;
    }
    
    .btn:hover,
    .btn:focus {
        transform: none !important;
        box-shadow: none !important;
    }
    
    /* Remove all transitions for static feel - EXCEPT modals */
    .dark-theme-card:not(.modal-content),
    .btn:not(.modal-content .btn) {
        transition: none !important;
    }
    

</style>

<div class="container mt-4 guides-page">
    @Html.AntiForgeryToken()
    
    <div class="text-center mb-5">
        <h1 class="dark-theme-section-title">
            <i class="fas fa-user-tie me-3"></i>@ViewData["Title"]
        </h1>
        <p class="dark-theme-section-subtitle">Manage travel guides and their assignments</p>
    </div>
    
    @if (!string.IsNullOrEmpty(TempData["SuccessMessage"]?.ToString()))
    {
        <div class="alert alert-success alert-dismissible fade show dark-theme-alert" role="alert">
            <i class="fas fa-check-circle me-2"></i>@TempData["SuccessMessage"]
            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    
    @if (!string.IsNullOrEmpty(Model.ErrorMessage))
    {
        <div class="alert alert-danger dark-theme-alert" role="alert">
            <i class="fas fa-exclamation-triangle me-2"></i>@Model.ErrorMessage
        </div>
    }

    <!-- Search and Filter Section -->
    <div class="row mb-4">
        <div class="col-lg-8 col-md-6">
            <div class="dark-theme-card p-3">
                <div class="row g-3 align-items-center">
                    <div class="col-md-8">
                        <div class="position-relative">
                            <input type="text" id="searchInput" class="form-control" 
                                   placeholder="Search guides by name, email..." 
                                   value="@Model.SearchFilter">
                            <i class="fas fa-search position-absolute top-50 end-0 translate-middle-y me-3" 
                               style="color: #6c757d;"></i>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <button type="button" id="clearSearch" class="btn btn-outline-secondary w-100">
                            <i class="fas fa-times me-2"></i>Clear
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-4 col-md-6">
            <div class="text-md-end">
                <span class="badge bg-primary fs-6 me-2">
                    <i class="fas fa-users me-1"></i>
                    <span id="guideCount">@Model.Guides.Count()</span> guides
                </span>
            </div>
        </div>
    </div>

    <!-- Loading Indicator -->
    <div id="loadingIndicator" class="text-center py-4 d-none">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-2 text-muted">Loading guides...</p>
    </div>
    
    <!-- Guides Grid -->
    <div id="guidesContainer" class="row row-cols-1 row-cols-md-3 g-4">
        <!-- Add New Guide Card -->
        <div class="col">
            <a asp-page="./Create" class="text-decoration-none">
                <div class="dark-theme-card h-100">
                    <div class="card-body d-flex flex-column align-items-center justify-content-center text-center" style="min-height: 400px;">
                        <div class="mb-4 d-flex align-items-center justify-content-center rounded-circle" 
                             style="width: 80px; height: 80px; background: linear-gradient(135deg, #3498db, #2ecc71); border: 3px solid #3498db;">
                            <i class="fas fa-plus fs-2" style="color: white;"></i>
                        </div>
                        <h5 class="card-title fw-bold" style="color: #3498db;">Add New Guide</h5>
                        <p class="card-text" style="color: #bdc3c7;">Create a new travel guide profile to expand your team</p>
                    </div>
                </div>
            </a>
        </div>

        @foreach (var guide in Model.Guides)
        {
            <div class="col guide-card" data-guide-id="@guide.Id">
                <div class="dark-theme-card h-100">
                    <div class="position-relative">
                        @* Always use default placeholder for now (no profile photos) *@
                        <div class="card-img-top d-flex justify-content-center align-items-center" 
                             style="height: 200px; background: linear-gradient(135deg, #3498db, #2ecc71); border-radius: 20px 20px 0 0;">
                            <i class="fas fa-user fs-1" style="color: white;"></i>
                        </div>
                    </div>
                    
                    <div class="card-body d-flex flex-column" style="min-height: 180px;">
                        <h5 class="card-title fw-bold" style="color: #3498db;">
                            @guide.FullName
                        </h5>
                        
                        <div class="mb-3">
                            @if (!string.IsNullOrEmpty(guide.Email))
                            {
                                <p class="mb-1" style="color: #bdc3c7;">
                                    <i class="fas fa-envelope me-2"></i>@guide.Email
                                </p>
                            }
                            @if (!string.IsNullOrEmpty(guide.PhoneNumber))
                            {
                                <p class="mb-1" style="color: #bdc3c7;">
                                    <i class="fas fa-phone me-2"></i>@guide.PhoneNumber
                                </p>
                            }
                            @if (guide.YearsExperience.HasValue)
                            {
                                <p class="mb-1" style="color: #bdc3c7;">
                                    <i class="fas fa-star me-2"></i>@guide.YearsExperience years experience
                                </p>
                            }
                        </div>
                        
                        <!-- Bio section with consistent height -->
                        <div class="flex-grow-1 d-flex align-items-start">
                            @if (!string.IsNullOrEmpty(guide.Bio))
                            {
                                <p class="card-text mb-0" style="color: #bdc3c7; line-height: 1.5;">
                                    @(guide.Bio.Length > 100 ? guide.Bio.Substring(0, 100) + "..." : guide.Bio)
                                </p>
                            }
                            else
                            {
                                <p class="card-text mb-0" style="color: #95a5a6; font-style: italic;">
                                    No bio available
                                </p>
                            }
                        </div>
                    </div>
                    
                    <div class="card-footer" style="background: rgba(255, 255, 255, 0.02); border-top: 1px solid rgba(255, 255, 255, 0.1);">
                        <div class="d-flex gap-2 flex-wrap">
                            <a asp-page="./Details" asp-route-id="@guide.Id" class="btn btn-sm btn-primary">
                                <i class="fas fa-info-circle me-1"></i> Details
                            </a>
                            <a asp-page="./Edit" asp-route-id="@guide.Id" class="btn btn-sm btn-outline-primary">
                                <i class="fas fa-edit me-1"></i> Edit
                            </a>
                            <div class="ms-auto">
                                <button type="button" class="btn btn-sm btn-outline-danger" 
                                        onclick="confirmDelete(@guide.Id, '@guide.FullName');">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- Empty State -->
    <div id="emptyState" class="text-center py-5 @(Model.Guides.Any() ? "d-none" : "")">
        <div class="dark-theme-card p-5">
            <div class="empty-state">
                <div class="rounded-circle d-flex align-items-center justify-content-center mx-auto mb-4" 
                     style="width: 120px; height: 120px; background: linear-gradient(135deg, #3498db, #2ecc71); border: 2px solid #3498db;">
                    <i class="fas fa-user" style="color: white; font-size: 3rem;"></i>
                </div>
                <h3 class="mb-3" style="color: #ecf0f1;">No Guides Found</h3>
                <p class="mb-4" style="color: #bdc3c7; font-size: 1.1rem;">
                    <span id="emptyStateMessage">Start building your guide team by adding the first guide to your system.</span>
                </p>
                <a asp-page="./Create" class="btn btn-primary btn-lg">
                    <i class="fas fa-plus me-2"></i>Add First Guide
                </a>
            </div>
        </div>
    </div>
</div>

<!-- Custom Delete Confirmation Modal -->
<div id="deleteModalOverlay" style="display: none; position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; z-index: 99999;">
    <div id="deleteModalDialog" style="position: absolute; background: #2c3e50; border-radius: 10px; box-shadow: 0 10px 40px rgba(0,0,0,0.6); width: 450px; max-width: 90vw; max-height: 90vh; border: 2px solid rgba(52, 152, 219, 0.4);">
        <div style="padding: 20px; border-bottom: 1px solid rgba(255, 255, 255, 0.1);">
            <h5 style="margin: 0; color: #ecf0f1; font-weight: bold;">
                <i class="fas fa-exclamation-triangle me-2" style="color: #e74c3c;"></i>
                    Confirm Delete
                </h5>
            <button onclick="closeDeleteModal()" style="float: right; margin-top: -25px; background: none; border: none; color: #bdc3c7; font-size: 20px; cursor: pointer;">&times;</button>
            </div>
        <div style="padding: 25px; text-align: center;">
                    <i class="fas fa-user-times fa-3x mb-3" style="color: #e74c3c;"></i>
            <p style="margin-bottom: 15px; color: #ecf0f1;">
                        Are you sure you want to delete 
                <strong id="deleteGuideName" style="color: #3498db;"></strong>?
                    </p>
            <div style="background: rgba(231, 76, 60, 0.1); border: 1px solid rgba(231, 76, 60, 0.3); border-radius: 8px; padding: 12px; margin: 15px 0;">
                <i class="fas fa-exclamation-circle me-2" style="color: #e74c3c;"></i>
                <span style="color: #ecf0f1;">This action cannot be undone. The guide will be removed from all trip assignments.</span>
            </div>
        </div>
        <div style="padding: 15px 25px; border-top: 1px solid rgba(255, 255, 255, 0.1); display: flex; gap: 10px;">
            <button type="button" onclick="closeDeleteModal()" style="flex: 1; background: #6c757d; color: white; border: none; padding: 10px; border-radius: 6px; cursor: pointer;">
                    <i class="fas fa-times me-2"></i>Cancel
                </button>
            <button type="button" id="confirmDeleteBtn" onclick="deleteSelectedGuide()" style="flex: 1; background: #e74c3c; color: white; border: none; padding: 10px; border-radius: 6px; cursor: pointer;">
                    <i class="fas fa-trash me-2"></i>Delete Guide
                </button>
        </div>
    </div>
</div>

@section Scripts {
    <style>
        /* MODAL POSITIONING - ADMIN GUIDES PAGE */
        #deleteModalOverlay {
            position: fixed !important;
            top: 0 !important;
            left: 0 !important;
            width: 100vw !important;
            height: 100vh !important;
            z-index: 999999 !important;
            pointer-events: auto !important;
        }
        
        #deleteModalDialog {
            position: absolute !important;
            z-index: 1000000 !important;
        }
    </style>
    
    <script>
        // Guide management AJAX functionality
        let currentSearchTerm = '@Model.SearchFilter';
        let isLoading = false;

        document.addEventListener('DOMContentLoaded', function() {
            initializeGuideManagement();
        });

        function initializeGuideManagement() {
            console.log('Initializing guide management AJAX functionality');
            initializeSearch();
            initializeDeleteHandlers();
        }

        function initializeSearch() {
            const searchInput = document.getElementById('searchInput');
            const clearButton = document.getElementById('clearSearch');
            let searchTimeout;

            searchInput.addEventListener('input', function() {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(() => {
                    performSearch(this.value);
                }, 300);
            });

            clearButton.addEventListener('click', function() {
                searchInput.value = '';
                performSearch('');
            });

            searchInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    clearTimeout(searchTimeout);
                    performSearch(this.value);
                }
            });
        }

        async function performSearch(searchTerm) {
            if (isLoading) return;

            try {
                isLoading = true;
                showLoadingIndicator();

                const response = await fetch(`?handler=Search&searchTerm=${encodeURIComponent(searchTerm)}`, {
                    method: 'GET'
                });

                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }

                const data = await response.json();

                if (data.success) {
                    updateGuidesDisplay(data.guides, searchTerm);
                } else {
                    showMessage(data.message || 'Search failed', 'error');
                }

            } catch (error) {
                console.error('Search error:', error);
                showMessage('Search failed. Please try again.', 'error');
            } finally {
                isLoading = false;
                hideLoadingIndicator();
            }
        }

        function updateGuidesDisplay(guides, searchTerm) {
            const container = document.getElementById('guidesContainer');
            const guideCount = document.getElementById('guideCount');
            const emptyState = document.getElementById('emptyState');
            const emptyMessage = document.getElementById('emptyStateMessage');

            const addCard = container.querySelector('.admin-card-link').parentElement;
            const guideCards = container.querySelectorAll('.guide-card');
            guideCards.forEach(card => card.remove());

            guideCount.textContent = guides.length;

            if (guides.length > 0) {
                guides.forEach(guide => {
                    const guideCard = createGuideCard(guide);
                    container.appendChild(guideCard);
                });
                emptyState.classList.add('d-none');
            } else {
                if (searchTerm) {
                    emptyMessage.textContent = `No guides found matching "${searchTerm}". Try a different search term.`;
                } else {
                    emptyMessage.textContent = 'Start building your guide team by adding the first guide to your system.';
                }
                emptyState.classList.remove('d-none');
            }

            currentSearchTerm = searchTerm;
        }

        function createGuideCard(guide) {
            const col = document.createElement('div');
            col.className = 'col guide-card';
            col.setAttribute('data-guide-id', guide.id);

            // Always use default placeholder for now (no profile photos)
            const imageHtml = `<div class="card-img-top d-flex justify-content-center align-items-center" 
                     style="height: 200px; background: linear-gradient(135deg, #3498db, #2ecc71); border-radius: 20px 20px 0 0;">
                    <i class="fas fa-user fs-1" style="color: white;"></i>
                 </div>`;

            const contactInfo = `
                ${guide.email ? `<p class="text-muted mb-1"><i class="fas fa-envelope me-2"></i>${guide.email}</p>` : ''}
                ${guide.phoneNumber ? `<p class="text-muted mb-1"><i class="fas fa-phone me-2"></i>${guide.phoneNumber}</p>` : ''}
                ${guide.yearsExperience ? `<p class="text-muted mb-1"><i class="fas fa-star me-2"></i>${guide.yearsExperience} years experience</p>` : ''}
            `;

            const bio = guide.bio ? 
                `<p class="card-text" style="color: #bdc3c7; line-height: 1.5;">
                    ${guide.bio.length > 100 ? guide.bio.substring(0, 100) + '...' : guide.bio}
                 </p>` : '';

            col.innerHTML = `
                <div class="dark-theme-card h-100">
                    <div class="position-relative">${imageHtml}</div>
                    <div class="card-body">
                        <h5 class="card-title fw-bold" style="color: #3498db;">${guide.fullName}</h5>
                        <div class="mb-3">${contactInfo}</div>
                        ${bio}
                    </div>
                    <div class="card-footer" style="background: rgba(255, 255, 255, 0.02); border-top: 1px solid rgba(255, 255, 255, 0.1);">
                        <div class="d-flex gap-2 flex-wrap">
                            <a href="/Admin/Guides/Details/${guide.id}" class="btn btn-sm btn-primary btn-animated">
                                <i class="fas fa-info-circle me-1"></i> Details
                            </a>
                            <a href="/Admin/Guides/Edit/${guide.id}" class="btn btn-sm btn-outline-primary btn-animated">
                                <i class="fas fa-edit me-1"></i> Edit
                            </a>
                            <div class="ms-auto">
                                <button type="button" class="btn btn-sm btn-outline-danger btn-animated" 
                                        onclick="confirmDelete(${guide.id}, '${guide.fullName}');">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            `;

            return col;
        }

        function initializeDeleteHandlers() {
            // Custom modal handlers are now set up in the onclick functions
        }

        function confirmDelete(guideId, guideName) {
            const guideNameElement = document.getElementById('deleteGuideName');
            guideNameElement.textContent = guideName;
            window.guideToDelete = { id: guideId, name: guideName };
            showDeleteModal();
        }

        // Custom modal functions
        function showDeleteModal() {
            var overlay = document.getElementById('deleteModalOverlay');
            var dialog = document.getElementById('deleteModalDialog');
            
            // Calculate center position in current viewport (slightly higher than center)
            var scrollTop = window.scrollY;
            var windowHeight = window.innerHeight;
            var modalHeight = 350; // approximate modal height
            var centerY = scrollTop + (windowHeight - modalHeight) / 2 - 60; // 60px higher than center
            
            // Position modal exactly where user is looking
            dialog.style.top = Math.max(scrollTop + 20, centerY) + 'px'; // never go above viewport + 20px
            dialog.style.left = '50%';
            dialog.style.transform = 'translateX(-50%)';
            
            // Show modal
            overlay.style.display = 'block';
        }

        function closeDeleteModal() {
            // Hide modal
            document.getElementById('deleteModalOverlay').style.display = 'none';
        }

        // Close modal when clicking outside
        document.getElementById('deleteModalOverlay').addEventListener('click', function(e) {
            if (e.target === this) {
                closeDeleteModal();
            }
        });

        // Also allow ESC key to close modal
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape' && document.getElementById('deleteModalOverlay').style.display === 'block') {
                closeDeleteModal();
            }
        });

        function deleteSelectedGuide() {
            if (window.guideToDelete) {
                deleteGuide(window.guideToDelete.id, window.guideToDelete.name);
            }
        }

        async function deleteGuide(guideId, guideName) {
            try {
                closeDeleteModal();
                showLoadingIndicator();

                // Get anti-forgery token
                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

                const response = await fetch('?handler=Delete', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'RequestVerificationToken': token
                    },
                    body: `id=${guideId}&__RequestVerificationToken=${encodeURIComponent(token)}`
                });

                const data = await response.json();

                if (data.success) {
                    showMessage(data.message, 'success');
                    const guideCard = document.querySelector(`[data-guide-id="${guideId}"]`);
                    if (guideCard) {
                        guideCard.remove();
                    }
                    
                    const guideCount = document.getElementById('guideCount');
                    const currentCount = parseInt(guideCount.textContent);
                    guideCount.textContent = currentCount - 1;
                    
                    const remainingCards = document.querySelectorAll('.guide-card');
                    if (remainingCards.length === 0) {
                        document.getElementById('emptyState').classList.remove('d-none');
                    }
                } else {
                    showMessage(data.message, 'error');
                }

            } catch (error) {
                console.error('Delete error:', error);
                showMessage('Failed to delete guide. Please try again.', 'error');
            } finally {
                hideLoadingIndicator();
            }
        }

        function showLoadingIndicator() {
            document.getElementById('loadingIndicator').classList.remove('d-none');
        }

        function hideLoadingIndicator() {
            document.getElementById('loadingIndicator').classList.add('d-none');
        }

        function showMessage(message, type) {
            const toast = document.createElement('div');
            toast.className = `alert alert-${type === 'error' ? 'danger' : 'success'} alert-dismissible fade show position-fixed`;
            toast.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
            
            toast.innerHTML = `
                <i class="fas fa-${type === 'error' ? 'exclamation-circle' : 'check-circle'} me-2"></i>
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            `;

            document.body.appendChild(toast);

            setTimeout(() => {
                if (toast.parentNode) {
                    toast.remove();
                }
            }, 5000);
        }
    </script>
} 