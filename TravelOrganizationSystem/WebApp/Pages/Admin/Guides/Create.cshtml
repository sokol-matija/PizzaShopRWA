@page
@model WebApp.Pages.Admin.Guides.CreateModel
@{
    ViewData["Title"] = "Create New Guide";
}

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <!-- Breadcrumb Navigation -->
            <nav aria-label="breadcrumb" class="mb-4">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item">
                        <a asp-page="/Index" style="color: #3498db; text-decoration: none;">
                            <i class="fas fa-home me-1"></i>Home
                        </a>
                    </li>
                    <li class="breadcrumb-item">
                        <a asp-page="./Index" style="color: #3498db; text-decoration: none;">
                            <i class="fas fa-user-tie me-1"></i>Manage Guides
                        </a>
                    </li>
                    <li class="breadcrumb-item active" aria-current="page" style="color: #ecf0f1;">Create New Guide</li>
                </ol>
            </nav>

            <div class="dark-theme-card">
                <div class="card-header border-0" style="background: rgba(52, 152, 219, 0.1); border-radius: 20px 20px 0 0;">
                    <div class="d-flex align-items-center">
                        <div class="rounded-circle d-flex align-items-center justify-content-center me-3" 
                             style="width: 50px; height: 50px; background: linear-gradient(135deg, #3498db, #2ecc71);">
                            <i class="fas fa-user-plus" style="color: white; font-size: 1.2rem;"></i>
                        </div>
                        <div>
                            <h2 class="mb-0 fw-bold" style="color: #3498db;">@ViewData["Title"]</h2>
                            <p class="mb-0" style="color: #bdc3c7;">Add a new travel guide to your team</p>
                        </div>
                    </div>
                </div>
                
                <div class="card-body p-4">
                    <!-- Success/Error Messages -->
                    <div id="messageContainer" class="d-none mb-4">
                        <div id="successAlert" class="alert alert-success d-none" role="alert">
                            <i class="fas fa-check-circle me-2"></i>
                            <span id="successMessage"></span>
                        </div>
                        <div id="errorAlert" class="alert alert-danger d-none" role="alert">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            <span id="errorMessage"></span>
                        </div>
                    </div>

                    <!-- Traditional form for non-JS fallback -->
                    <form method="post" id="createGuideForm" class="dark-theme-form">
                        @Html.AntiForgeryToken()
                        <!-- Profile Image Placeholder -->
                        <div class="text-center mb-4">
                            <div class="rounded-circle d-flex align-items-center justify-content-center mx-auto" 
                                 style="width: 120px; height: 120px; background: linear-gradient(135deg, #3498db, #2ecc71); border: 3px solid #3498db;">
                                <i class="fas fa-user" style="color: white; font-size: 3rem;"></i>
                            </div>
                            <p class="mt-2 mb-0" style="color: #bdc3c7; font-size: 0.9rem;">
                                <i class="fas fa-info-circle me-1"></i>Profile photos will be available in a future update
                            </p>
                        </div>

                        <div class="row g-3">
                            <!-- First Name -->
                            <div class="col-md-6">
                                <label asp-for="Guide.FirstName" class="form-label">
                                    <i class="fas fa-user me-1"></i>First Name
                                </label>
                                <input asp-for="Guide.FirstName" class="form-control guide-input" 
                                       placeholder="Enter first name..." data-field="FirstName" />
                                <div class="invalid-feedback" id="FirstName-error"></div>
                            </div>

                            <!-- Last Name -->
                            <div class="col-md-6">
                                <label asp-for="Guide.LastName" class="form-label">
                                    <i class="fas fa-user me-1"></i>Last Name
                                </label>
                                <input asp-for="Guide.LastName" class="form-control guide-input" 
                                       placeholder="Enter last name..." data-field="LastName" />
                                <div class="invalid-feedback" id="LastName-error"></div>
                            </div>

                            <!-- Email -->
                            <div class="col-md-8">
                                <label asp-for="Guide.Email" class="form-label">
                                    <i class="fas fa-envelope me-1"></i>Email Address
                                </label>
                                <input asp-for="Guide.Email" type="email" class="form-control guide-input" 
                                       placeholder="guide@example.com" data-field="Email" />
                                <div class="invalid-feedback" id="Email-error"></div>
                                <div class="form-text" style="color: #95a5a6;">
                                    <i class="fas fa-shield-alt me-1"></i>Used for login and important notifications
                                </div>
                            </div>

                            <!-- Years of Experience -->
                            <div class="col-md-4">
                                <label asp-for="Guide.YearsExperience" class="form-label">
                                    <i class="fas fa-medal me-1"></i>Years of Experience
                                </label>
                                <input asp-for="Guide.YearsExperience" type="number" min="0" max="50" 
                                       class="form-control guide-input" placeholder="0" data-field="YearsExperience" />
                                <div class="invalid-feedback" id="YearsExperience-error"></div>
                            </div>

                            <!-- Phone Number -->
                            <div class="col-md-6">
                                <label asp-for="Guide.PhoneNumber" class="form-label">
                                    <i class="fas fa-phone me-1"></i>Phone Number
                                </label>
                                <input asp-for="Guide.PhoneNumber" type="tel" class="form-control guide-input" 
                                       placeholder="+1 (555) 123-4567" data-field="PhoneNumber" />
                                <div class="invalid-feedback" id="PhoneNumber-error"></div>
                                <div class="form-text" style="color: #95a5a6;">Optional</div>
                            </div>

                            <!-- Biography -->
                            <div class="col-md-12">
                                <label asp-for="Guide.Bio" class="form-label">
                                    <i class="fas fa-align-left me-1"></i>Biography
                                </label>
                                <textarea asp-for="Guide.Bio" class="form-control guide-input" rows="4" 
                                          placeholder="Tell travelers about this guide's expertise, specialties, and what makes them special..." 
                                          data-field="Bio"></textarea>
                                <div class="invalid-feedback" id="Bio-error"></div>
                                <div class="form-text" style="color: #95a5a6;">
                                    Optional - Share the guide's background, specialties, and unique qualifications
                                </div>
                            </div>
                        </div>

                        <!-- Form Actions -->
                        <div class="d-flex justify-content-between mt-4 pt-3" style="border-top: 1px solid rgba(255, 255, 255, 0.1);">
                            <a asp-page="./Index" class="btn btn-secondary btn-lg">
                                <i class="fas fa-arrow-left me-2"></i>Cancel
                            </a>
                            <button type="submit" id="createBtn" class="btn btn-primary btn-lg">
                                <i class="fas fa-plus me-2"></i>Create Guide
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Guide creation AJAX functionality
        let isSubmitting = false;
        let validationTimeout;

        document.addEventListener('DOMContentLoaded', function() {
            initializeGuideCreation();
        });

        function initializeGuideCreation() {
            console.log('Initializing guide creation with AJAX validation');
            
            // Initialize real-time validation
            initializeValidation();
            
            // Initialize form submission
            initializeFormSubmission();
        }

        function initializeValidation() {
            const inputs = document.querySelectorAll('.guide-input');
            
            inputs.forEach(input => {
                // Validate on blur (when user leaves field)
                input.addEventListener('blur', function() {
                    validateField(this);
                });

                // Validate on input with debouncing (as user types)
                input.addEventListener('input', function() {
                    clearTimeout(validationTimeout);
                    const field = this;
                    validationTimeout = setTimeout(() => {
                        validateField(field);
                    }, 500); // 500ms delay for typing
                });
            });
        }

        async function validateField(field) {
            const fieldName = field.getAttribute('data-field');
            const value = field.value.trim();
            
            // Clear previous validation state
            field.classList.remove('is-valid', 'is-invalid');
            const errorDiv = document.getElementById(`${fieldName}-error`);
            if (errorDiv) errorDiv.textContent = '';

            // Skip validation for empty optional fields
            if (!value && !isRequiredField(fieldName)) {
                return;
            }

            try {
                const formData = collectFormData();
                
                const response = await fetch('?handler=Validate', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': getAntiForgeryToken()
                    },
                    body: JSON.stringify(formData)
                });

                if (response.ok) {
                    const result = await response.json();
                    updateFieldValidation(fieldName, result.errors);
                }
            } catch (error) {
                console.error('Validation error:', error);
            }
        }

        function isRequiredField(fieldName) {
            return ['FirstName', 'LastName', 'Email'].includes(fieldName);
        }

        function updateFieldValidation(fieldName, errors) {
            const field = document.querySelector(`[data-field="${fieldName}"]`);
            const errorDiv = document.getElementById(`${fieldName}-error`);
            
            if (!field || !errorDiv) return;

            const fieldErrors = errors[fieldName] || errors[`Guide.${fieldName}`] || [];
            
            if (fieldErrors.length > 0) {
                field.classList.add('is-invalid');
                field.classList.remove('is-valid');
                errorDiv.textContent = fieldErrors[0];
            } else if (field.value.trim()) {
                field.classList.add('is-valid');
                field.classList.remove('is-invalid');
                errorDiv.textContent = '';
            }
        }

        function initializeFormSubmission() {
            const form = document.getElementById('createGuideForm');
            
            form.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                if (isSubmitting) return;
                
                await submitForm();
            });
        }

        async function submitForm() {
            if (isSubmitting) return;
            
            try {
                isSubmitting = true;
                updateSubmitButton(true);
                hideMessages();

                const formData = collectFormData();
                console.log('Sending form data:', formData);
                
                const response = await fetch('?handler=Create', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': getAntiForgeryToken()
                    },
                    body: JSON.stringify(formData)
                });

                if (response.ok) {
                    const result = await response.json();
                    
                    if (result.success) {
                        showSuccessMessage(result.message);
                        // Redirect after 2 seconds
                        setTimeout(() => {
                            window.location.href = '/Admin/Guides';
                        }, 2000);
                    } else {
                        if (result.errors) {
                            displayValidationErrors(result.errors);
                        } else {
                            showErrorMessage(result.message || 'Failed to create guide. Please try again.');
                        }
                    }
                } else {
                    // Get detailed error information
                    const errorText = await response.text();
                    console.error('API Error Response:', {
                        status: response.status,
                        statusText: response.statusText,
                        body: errorText
                    });
                    throw new Error(`HTTP ${response.status}: ${response.statusText} - ${errorText}`);
                }
                
            } catch (error) {
                console.error('Submission error:', error);
                showErrorMessage('An error occurred while creating the guide. Please try again.');
            } finally {
                isSubmitting = false;
                updateSubmitButton(false);
            }
        }

        function collectFormData() {
            return {
                firstName: document.querySelector('[data-field="FirstName"]').value.trim(),
                lastName: document.querySelector('[data-field="LastName"]').value.trim(),
                email: document.querySelector('[data-field="Email"]').value.trim(),
                phoneNumber: document.querySelector('[data-field="PhoneNumber"]').value.trim(),
                bio: document.querySelector('[data-field="Bio"]').value.trim(),
                yearsExperience: parseInt(document.querySelector('[data-field="YearsExperience"]').value) || null
            };
        }

        function displayValidationErrors(errors) {
            // Clear all previous validation states
            document.querySelectorAll('.guide-input').forEach(input => {
                input.classList.remove('is-valid', 'is-invalid');
            });
            
            // Display new errors
            Object.keys(errors).forEach(fieldName => {
                const cleanFieldName = fieldName.replace('Guide.', '');
                updateFieldValidation(cleanFieldName, { [fieldName]: errors[fieldName] });
            });
        }

        function updateSubmitButton(loading) {
            const btn = document.getElementById('createBtn');
            if (loading) {
                btn.disabled = true;
                btn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Creating Guide...';
            } else {
                btn.disabled = false;
                btn.innerHTML = '<i class="fas fa-plus me-2"></i>Create Guide';
            }
        }

        function showSuccessMessage(message) {
            const container = document.getElementById('messageContainer');
            const alert = document.getElementById('successAlert');
            const messageSpan = document.getElementById('successMessage');
            
            messageSpan.textContent = message;
            alert.classList.remove('d-none');
            container.classList.remove('d-none');
            
            // Hide error alert
            document.getElementById('errorAlert').classList.add('d-none');
            
            // Scroll to top
            container.scrollIntoView({ behavior: 'smooth' });
        }

        function showErrorMessage(message) {
            const container = document.getElementById('messageContainer');
            const alert = document.getElementById('errorAlert');
            const messageSpan = document.getElementById('errorMessage');
            
            messageSpan.textContent = message;
            alert.classList.remove('d-none');
            container.classList.remove('d-none');
            
            // Hide success alert
            document.getElementById('successAlert').classList.add('d-none');
            
            // Scroll to top
            container.scrollIntoView({ behavior: 'smooth' });
        }

        function hideMessages() {
            const container = document.getElementById('messageContainer');
            container.classList.add('d-none');
            document.getElementById('successAlert').classList.add('d-none');
            document.getElementById('errorAlert').classList.add('d-none');
        }

        function getAntiForgeryToken() {
            const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value || '';
            console.log('Anti-forgery token:', token ? 'Found' : 'Missing');
            return token;
        }
    </script>
}
