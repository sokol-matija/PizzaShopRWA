@page
@model WebApp.Pages.Admin.GuideAssignments.IndexModel
@{
    ViewData["Title"] = "Manage Guide Assignments";
    
    // Force cache busting for this critical admin page
    Response.Headers.Add("Cache-Control", "no-cache, no-store, must-revalidate");
    Response.Headers.Add("Pragma", "no-cache");
    Response.Headers.Add("Expires", "0");
}

<style>
    /* PREVENT MODAL CLIPPING - AGGRESSIVE APPROACH */
    body.modal-open {
        overflow: visible !important;
    }
    
    body.modal-open *,
    body.modal-open .dark-theme-card,
    body.modal-open .card,
    body.modal-open .container,
    body.modal-open .row,
    body.modal-open .col,
    body.modal-open [class*="col-"],
    body.modal-open .card-body,
    body.modal-open .card-header,
    body.modal-open .card-footer {
        overflow: visible !important;
    }
    
    /* Ensure modal is always on top */
    #removeGuideModalOverlay {
        position: fixed !important;
        z-index: 999999 !important;
    }
    
    /* DISABLE ALL HOVER EFFECTS ON DARK THEME CARDS */
    .dark-theme-card:hover,
    .dark-theme-card:hover::before,
    .dark-theme-card:hover::after,
    .card:hover,
    .card:hover::before,
    .card:hover::after {
        border-color: inherit !important;
        box-shadow: inherit !important;
        transform: none !important;
        scale: none !important;
    }
    
    /* Disable any Bootstrap card hover effects */
    .card.dark-theme-card:hover,
    .dark-theme-card.card:hover {
        box-shadow: inherit !important;
        transform: none !important;
    }
    
    /* Remove all transitions to make cards completely static - EXCEPT modals */
    .dark-theme-card:not(.modal-content),
    .dark-theme-card:not(.modal-content)::before,
    .dark-theme-card:not(.modal-content)::after,
    .card:not(.modal-content),
    .card:not(.modal-content)::before,
    .card:not(.modal-content)::after {
        transition: none !important;
        animation: none !important;
    }
    
    /* ALLOW admin-plus-circle animation to work */
    .admin-plus-circle,
    .admin-plus-circle i,
    .admin-plus-circle::after {
        transition: all 0.3s ease !important;
        animation: initial !important;
    }
    
    /* Enable the rotation animation on hover */
    .admin-plus-circle:hover i {
        transform: rotate(90deg) !important;
    }
    
    /* Enable the ripple effect on click */
    .admin-plus-circle:active::after {
        animation: adminRipple 0.6s ease-out !important;
    }
    
    /* CIRCULAR DELETE BUTTON - inspired by admin-plus-circle */
    .admin-delete-circle {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        background: linear-gradient(135deg, #e74c3c, #c0392b);
        border: none;
        color: white;
        font-size: 0.875rem;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.3s ease;
        position: relative;
        box-shadow: 
            0 2px 8px rgba(231, 76, 60, 0.3),
            inset 0 1px 0 rgba(255, 255, 255, 0.2);
    }
    
    /* Delete icon transition */
    .admin-delete-circle i {
        transition: transform 0.3s ease;
    }
    
    /* Hover effects for delete circle */
    .admin-delete-circle:hover {
        box-shadow: 
            0 4px 12px rgba(231, 76, 60, 0.4),
            inset 0 1px 0 rgba(255, 255, 255, 0.2);
        transform: scale(1.1);
    }
    
    /* Rotation animation on hover */
    .admin-delete-circle:hover i {
        transform: rotate(90deg);
    }
    
    /* Ripple effect on click */
    .admin-delete-circle::after {
        content: '';
        position: absolute;
        top: 50%;
        left: 50%;
        width: 3px;
        height: 3px;
        background: rgba(255, 255, 255, 0.6);
        opacity: 0;
        border-radius: 100%;
        transform: scale(1, 1) translate(-50%, -50%);
        transform-origin: 50% 50%;
    }
    
    .admin-delete-circle:active::after {
        animation: adminRipple 0.6s ease-out;
    }
    

</style>

<div class="container mt-4 guide-assignments-page">
    @Html.AntiForgeryToken()
    
    <!-- Page Header -->
    <div class="text-center mb-5">
        <h1 class="dark-theme-section-title">
            <i class="fas fa-user-tie me-3"></i>@ViewData["Title"]
        </h1>
        <p class="dark-theme-section-subtitle">Assign and manage guides for trips</p>
    </div>
    
    <!-- Success/Error Messages -->
    @if (!string.IsNullOrEmpty(TempData["SuccessMessage"]?.ToString()))
    {
        <div class="alert alert-success alert-dismissible fade show dark-theme-alert" role="alert">
            <i class="fas fa-check-circle me-2"></i>@TempData["SuccessMessage"]
            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    
    @if (!string.IsNullOrEmpty(Model.ErrorMessage))
    {
        <div class="alert alert-danger dark-theme-alert" role="alert">
            <i class="fas fa-exclamation-triangle me-2"></i>@Model.ErrorMessage
        </div>
    }

    <!-- Success/Error Message for AJAX operations -->
    <div id="messageAlert" class="alert alert-dismissible fade show d-none" role="alert">
        <span id="messageText"></span>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>

    <!-- Guide Assignment Form -->
    <div class="row mb-5">
        <div class="col-lg-8 mx-auto">
            <div class="dark-theme-card">
                <div class="card-header" style="background: rgba(52, 152, 219, 0.1); border-bottom: 1px solid rgba(52, 152, 219, 0.3);">
                    <h4 class="mb-0 fw-bold" style="color: #3498db;">
                        <i class="fas fa-plus-circle me-2"></i>Assign Guide to Trip
                    </h4>
                </div>
                <div class="card-body p-4">
                    <form id="assignForm" class="dark-theme-form">
                        <div class="row g-3">
                            <div class="col-md-5">
                                <label for="tripSelect" class="form-label fw-medium" style="color: #ecf0f1;">
                                    <i class="fas fa-map-marked-alt me-2" style="color: #2ecc71;"></i>Select Trip
                                </label>
                                <select id="tripSelect" class="form-select" required>
                                    <option value="">Choose a trip...</option>
                                    @foreach (var trip in Model.Trips)
                                    {
                                        <option value="@trip.Id">@trip.Title</option>
                                    }
                                </select>
                            </div>
                            <div class="col-md-5">
                                <label for="guideSelect" class="form-label fw-medium" style="color: #ecf0f1;">
                                    <i class="fas fa-user-tie me-2" style="color: #9b59b6;"></i>Select Guide
                                </label>
                                <select id="guideSelect" class="form-select" required>
                                    <option value="">Choose a guide...</option>
                                    @foreach (var guide in Model.Guides)
                                    {
                                        <option value="@guide.Id">@guide.FullName</option>
                                    }
                                </select>
                            </div>
                            <div class="col-md-2 d-flex align-items-end justify-content-center">
                                <button type="submit" class="admin-plus-circle" title="Assign Guide">
                                    <i class="fas fa-plus"></i>
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Section Title -->
    <div class="mb-4">
        <h4 class="fw-bold" style="color: #2ecc71;">
            <i class="fas fa-list me-2"></i>Trip Guide Assignments
        </h4>
        <p class="mb-0" style="color: #bdc3c7;">Manage guide assignments for each trip</p>
    </div>

    <!-- Trips with Assigned Guides -->
    @if (Model.Trips.Any())
    {
        <div class="row row-cols-1 row-cols-sm-2 row-cols-lg-3 g-4">
            @foreach (var trip in Model.Trips)
            {
                <div class="col">
                    <div class="card dark-theme-card h-100">
                        <div class="card-header border-0 pb-2" style="background: rgba(52, 152, 219, 0.1);">
                            <h5 class="mb-1 fw-bold" style="color: #3498db;">
                                @trip.Title
                            </h5>
                            <small style="color: #bdc3c7;">
                                <i class="fas fa-calendar me-1"></i>
                                @trip.StartDate.ToString("MMM dd") - @trip.EndDate.ToString("MMM dd, yyyy")
                            </small>
                        </div>
                        <div class="card-body d-flex flex-column pt-3">
                            <div class="guides-section flex-grow-1">
                                <h6 class="mb-3 fw-bold" style="color: #ecf0f1;">
                                    <i class="fas fa-users me-2" style="color: #9b59b6;"></i>Assigned Guides:
                                </h6>
                                
                                @if (trip.Guides != null && trip.Guides.Any())
                                {
                                    <div class="guide-entries">
                                        @foreach (var guide in trip.Guides)
                                        {
                                            <div class="guide-entry d-flex justify-content-between align-items-center mb-2 p-2 rounded-3" 
                                                 style="background: rgba(255, 255, 255, 0.05); border-left: 3px solid #2ecc71;">
                                                <div class="guide-info flex-grow-1" style="min-width: 0;">
                                                    <div class="fw-bold" style="color: #2ecc71; font-size: 0.95rem;">@guide.FullName</div>
                                                    @if (!string.IsNullOrEmpty(guide.Email))
                                                    {
                                                        <small style="color: #bdc3c7; font-size: 0.8rem; word-break: break-word;">@guide.Email</small>
                                                    }
                                                </div>
                                                <button type="button" 
                                                        class="admin-delete-circle ms-2"
                                                        style="flex-shrink: 0;"
                                                        onclick="confirmRemoveGuide(@trip.Id, @guide.Id, '@trip.Title', '@guide.FullName')"
                                                        title="Remove Guide">
                                                    <i class="fas fa-times"></i>
                                                </button>
                                            </div>
                                        }
                                    </div>
                                }
                                else
                                {
                                    <div class="text-center py-3">
                                        <i class="fas fa-info-circle fa-2x mb-2" style="color: #3498db; opacity: 0.5;"></i>
                                        <p class="mb-0" style="color: #bdc3c7; font-size: 0.9rem;">
                                            No guides assigned yet
                                        </p>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="text-center py-5">
            <div class="dark-theme-card p-5">
                <div class="empty-state">
                    <i class="fas fa-exclamation-circle fa-4x mb-3" style="color: #3498db; opacity: 0.7;"></i>
                    <h5 style="color: #ecf0f1;">No trips found</h5>
                    <p style="color: #bdc3c7;">Create some trips first to assign guides.</p>
                </div>
            </div>
        </div>
    }
</div>

<!-- Custom Remove Guide Confirmation Modal -->
<div id="removeGuideModalOverlay" style="display: none; position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; z-index: 99999;">
    <div id="removeGuideModalDialog" style="position: absolute; background: #2c3e50; border-radius: 10px; box-shadow: 0 10px 40px rgba(0,0,0,0.6); width: 450px; max-width: 90vw; max-height: 90vh; border: 2px solid rgba(52, 152, 219, 0.4);">
        <!-- Header -->
        <div style="padding: 20px; border-bottom: 2px solid rgba(255, 255, 255, 0.1); display: flex; justify-content: space-between; align-items: center; background: rgba(52, 152, 219, 0.1);">
            <h5 style="margin: 0; color: #ecf0f1; font-weight: bold; font-size: 18px;">
                <i class="fas fa-exclamation-triangle me-2" style="color: #f39c12;"></i>
                Confirm Guide Removal
            </h5>
            <button onclick="closeRemoveGuideModal()" style="background: rgba(231, 76, 60, 0.2); border: 2px solid #e74c3c; color: #e74c3c; font-size: 18px; cursor: pointer; line-height: 1; padding: 5px; width: 32px; height: 32px; display: flex; align-items: center; justify-content: center; border-radius: 50%; transition: all 0.2s; font-weight: bold;" onmouseover="this.style.backgroundColor='#e74c3c'; this.style.color='white';" onmouseout="this.style.backgroundColor='rgba(231, 76, 60, 0.2)'; this.style.color='#e74c3c';">&times;</button>
        </div>
        
        <!-- Content -->
        <div style="padding: 30px 25px;">
            <div style="text-align: center; margin-bottom: 20px;">
                <i class="fas fa-user-times" style="color: #e74c3c; font-size: 48px; margin-bottom: 15px;"></i>
                <p style="margin: 0; color: #ecf0f1; font-size: 17px; line-height: 1.5;">
                    Are you sure you want to remove<br>
                    <strong id="removeGuideName" style="color: #3498db; font-size: 18px;"></strong><br>
                    from<br>
                    <strong id="removeTripName" style="color: #2ecc71; font-size: 18px;"></strong>?
                </p>
            </div>
            
            <div style="background: linear-gradient(135deg, rgba(231, 76, 60, 0.15), rgba(231, 76, 60, 0.05)); border: 2px solid rgba(231, 76, 60, 0.4); border-radius: 8px; padding: 15px; text-align: center;">
                <i class="fas fa-exclamation-circle me-2" style="color: #e74c3c; font-size: 16px;"></i>
                <span style="color: #ecf0f1; font-weight: 500;">This will remove the guide's assignment from this trip.</span>
            </div>
        </div>
        
        <!-- Footer -->
        <div style="padding: 20px 25px; border-top: 2px solid rgba(255, 255, 255, 0.1); display: flex; gap: 15px; background: rgba(0,0,0,0.1);">
            <button type="button" onclick="closeRemoveGuideModal()" style="flex: 1; background: #6c757d; color: white; border: none; padding: 14px 20px; border-radius: 8px; cursor: pointer; font-weight: 600; font-size: 15px; transition: background-color 0.2s; border: 2px solid transparent;" onmouseover="this.style.backgroundColor='#5a6268'; this.style.borderColor='#ffffff20';" onmouseout="this.style.backgroundColor='#6c757d'; this.style.borderColor='transparent';">
                <i class="fas fa-times me-2"></i>Cancel
            </button>
            <form id="removeGuideForm" style="flex: 1;">
                <input type="hidden" id="removeTripId" />
                <input type="hidden" id="removeGuideId" />
                <button type="submit" style="width: 100%; background: #e74c3c; color: white; border: none; padding: 14px 20px; border-radius: 8px; cursor: pointer; font-weight: 600; font-size: 15px; transition: all 0.2s; border: 2px solid transparent;" onmouseover="this.style.backgroundColor='#c0392b'; this.style.borderColor='#ffffff20'; this.style.transform='translateY(-1px)';" onmouseout="this.style.backgroundColor='#e74c3c'; this.style.borderColor='transparent'; this.style.transform='translateY(0)';">
                    <i class="fas fa-trash me-2"></i>Remove Guide
                </button>
            </form>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const assignForm = document.getElementById('assignForm');
    const removeGuideForm = document.getElementById('removeGuideForm');
    const messageAlert = document.getElementById('messageAlert');
    const messageText = document.getElementById('messageText');
    
    // Show message function
    function showMessage(message, isSuccess) {
        messageText.textContent = message;
        messageAlert.className = isSuccess ? 
            'alert alert-success alert-dismissible fade show dark-theme-alert' : 
            'alert alert-danger alert-dismissible fade show dark-theme-alert';
        messageAlert.classList.remove('d-none');
        
        // Auto-hide success messages
        if (isSuccess) {
            setTimeout(() => {
                messageAlert.classList.add('d-none');
            }, 5000);
        }
    }
    
    // Assign guide form submission
    assignForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const tripId = document.getElementById('tripSelect').value;
        const guideId = document.getElementById('guideSelect').value;
        
        if (!tripId || !guideId) {
            showMessage('Please select both a trip and a guide.', false);
            return;
        }
        
        try {
            // Use page handler instead of direct API call
            const formData = new FormData();
            formData.append('tripId', tripId);
            formData.append('guideId', guideId);
            formData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]').value);
            
            const response = await fetch('?handler=Assign', {
                method: 'POST',
                body: formData
            });
            
            if (response.ok) {
                const result = await response.json();
                if (result.success) {
                    showMessage(result.message, true);
                    setTimeout(() => {
                        window.location.reload();
                    }, 1500);
                } else {
                    showMessage(result.message, false);
                }
            } else {
                showMessage('An error occurred while assigning the guide.', false);
            }
        } catch (error) {
            showMessage('An error occurred while assigning the guide.', false);
        }
    });
    
    // Remove guide form submission (from modal)
    removeGuideForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const tripId = document.getElementById('removeTripId').value;
        const guideId = document.getElementById('removeGuideId').value;
        
        try {
            // Use page handler instead of direct API call
            const formData = new FormData();
            formData.append('tripId', tripId);
            formData.append('guideId', guideId);
            formData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]').value);
            
            const response = await fetch('?handler=Remove', {
                method: 'POST',
                body: formData
            });
            
            if (response.ok) {
                const result = await response.json();
                
                // Close modal
                closeRemoveGuideModal();
                
                if (result.success) {
                    showMessage(result.message, true);
                    setTimeout(() => {
                        window.location.reload();
                    }, 1500);
                } else {
                    showMessage(result.message, false);
                }
            } else {
                showMessage('An error occurred while removing the guide.', false);
            }
        } catch (error) {
            showMessage('An error occurred while removing the guide.', false);
        }
    });
});

// Confirmation function for removing guides (called from onclick)
function confirmRemoveGuide(tripId, guideId, tripName, guideName) {
    document.getElementById('removeTripId').value = tripId;
    document.getElementById('removeGuideId').value = guideId;
    document.getElementById('removeTripName').textContent = tripName || 'this trip';
    document.getElementById('removeGuideName').textContent = guideName || 'this guide';
    
    showRemoveGuideModal();
}

// Custom modal functions
function showRemoveGuideModal() {
    var overlay = document.getElementById('removeGuideModalOverlay');
    var dialog = document.getElementById('removeGuideModalDialog');
    
    // Calculate center position in current viewport (slightly higher than center)
    var scrollTop = window.scrollY;
    var windowHeight = window.innerHeight;
    var modalHeight = 350; // approximate modal height
    var centerY = scrollTop + (windowHeight - modalHeight) / 2 - 60; // 60px higher than center
    
    // Position modal exactly where user is looking
    dialog.style.top = Math.max(scrollTop + 20, centerY) + 'px'; // never go above viewport + 20px
    dialog.style.left = '50%';
    dialog.style.transform = 'translateX(-50%)';
    
    // Add body class to prevent clipping and show modal
    document.body.classList.add('modal-open');
    overlay.style.display = 'block';
}

function closeRemoveGuideModal() {
    // Remove body class and hide modal
    document.body.classList.remove('modal-open');
    document.getElementById('removeGuideModalOverlay').style.display = 'none';
}

// Close modal when clicking outside (since background is transparent)
document.getElementById('removeGuideModalOverlay').addEventListener('click', function(e) {
    if (e.target === this) {
        closeRemoveGuideModal();
    }
});

// Also allow ESC key to close modal
document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape' && document.getElementById('removeGuideModalOverlay').style.display === 'block') {
        closeRemoveGuideModal();
    }
});
</script> 