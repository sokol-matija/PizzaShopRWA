
@page
@model WebApp.Pages.Destinations.CreateModel
@{
    ViewData["Title"] = "Create Destination";
}

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="dark-theme-form-container">
                <div class="dark-theme-form-header">
                    <h2><i class="fas fa-map-marker-alt me-2"></i>@ViewData["Title"]</h2>
                </div>
                
                @if (!string.IsNullOrEmpty(TempData["ErrorMessage"]?.ToString()))
                {
                    <div class="alert alert-danger dark-theme-alert mb-4" role="alert">
                        <i class="fas fa-exclamation-triangle me-2"></i>@TempData["ErrorMessage"]
                    </div>
                }

                <form method="post" class="needs-validation dark-theme-form" novalidate>
                        <div class="mb-3">
                            <label asp-for="Destination.Name" class="form-label">Destination Name</label>
                            <input asp-for="Destination.Name" class="form-control" required id="destinationName" />
                            <span asp-validation-for="Destination.Name" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Destination.Country" class="form-label">Country</label>
                            <input asp-for="Destination.Country" class="form-control" required id="destinationCountry" />
                            <span asp-validation-for="Destination.Country" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Destination.City" class="form-label">City</label>
                            <input asp-for="Destination.City" class="form-control" required id="destinationCity" />
                            <span asp-validation-for="Destination.City" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Destination.Description" class="form-label">Description</label>
                            <textarea asp-for="Destination.Description" class="form-control" rows="4"></textarea>
                            <span asp-validation-for="Destination.Description" class="text-danger"></span>
                            <div class="form-text">Optional: Add a description of the destination</div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Destination Image</label>
                            <input type="hidden" asp-for="Destination.ImageUrl" id="imageUrlInput" />
                            <div class="row">
                                <div class="col-md-8">
                                    <div class="image-preview-container mb-2" style="height: 200px; overflow: hidden; background-color: #f8f9fa; display: flex; align-items: center; justify-content: center;">
                                        <img id="imagePreview" src="" alt="Destination Image Preview" style="max-width: 100%; max-height: 200px; display: none;">
                                        <div id="noImagePlaceholder">
                                            <i class="fas fa-image text-muted" style="font-size: 3rem;"></i>
                                            <p class="text-muted mb-0">No image selected</p>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <button type="button" id="loadImageBtn" class="btn btn-outline-primary mb-2 w-100">
                                        <i class="fas fa-image me-1"></i> Load Image
                                    </button>
                                    <button type="button" id="refreshImageBtn" class="btn btn-outline-secondary mb-2 w-100" disabled>
                                        <i class="fas fa-sync-alt me-1"></i> Try Another
                                    </button>
                                </div>
                            </div>
                        </div>

                        <div class="d-flex justify-content-between">
                            <a asp-page="./Index" class="btn btn-secondary">
                                <i class="fas fa-arrow-left me-2"></i>Cancel
                            </a>
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-plus me-2"></i>Create Destination
                            </button>
                        </div>
                    </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        // Enable Bootstrap form validation
        (function () {
            'use strict'
            var forms = document.querySelectorAll('.needs-validation')
            Array.prototype.slice.call(forms).forEach(function (form) {
                form.addEventListener('submit', function (event) {
                    if (!form.checkValidity()) {
                        event.preventDefault()
                        event.stopPropagation()
                    }
                    form.classList.add('was-validated')
                }, false)
            })
        })()

        // Image handling with Unsplash
        document.addEventListener('DOMContentLoaded', function () {
            const loadImageBtn = document.getElementById('loadImageBtn');
            const refreshImageBtn = document.getElementById('refreshImageBtn');
            const imagePreview = document.getElementById('imagePreview');
            const imageUrlInput = document.getElementById('imageUrlInput');
            const noImagePlaceholder = document.getElementById('noImagePlaceholder');
            const nameInput = document.getElementById('destinationName');
            const cityInput = document.getElementById('destinationCity');
            const countryInput = document.getElementById('destinationCountry');

            // Function to get image from Unsplash
            async function getUnsplashImage() {
                try {
                    loadImageBtn.disabled = true;
                    loadImageBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i> Loading...';
                    refreshImageBtn.disabled = true;
                    
                    // Get query from inputs
                    const city = cityInput.value.trim();
                    const country = countryInput.value.trim();
                    
                    if (!city && !country) {
                        alert("Please enter at least a city or country name first.");
                        loadImageBtn.disabled = false;
                        loadImageBtn.innerHTML = '<i class="fas fa-image me-1"></i> Load Image';
                        return;
                    }
                    
                    const query = `${city} ${country} travel`;
                    console.log(`Fetching image for query: ${query}`);
                    
                    // Use the proper Unsplash API endpoint
                    const response = await fetch(`/api/unsplash/random?query=${encodeURIComponent(query)}&t=${Date.now()}`);
                    console.log('API Response status:', response.status);
                    
                    if (response.ok) {
                        const data = await response.json();
                        console.log('API Response data:', data);
                        
                        if (data && data.imageUrl) {
                            // Success! Display the image
                            imagePreview.src = data.imageUrl;
                            imagePreview.style.display = 'block';
                            imageUrlInput.value = data.imageUrl;
                            noImagePlaceholder.style.display = 'none';
                            refreshImageBtn.disabled = false;
                            console.log('Successfully loaded image from Unsplash API');
                            return;
                        } else {
                            console.error('API returned success but no image URL in response');
                            throw new Error('No image URL received from API');
                        }
                    } else {
                        // API returned an error status
                        const errorText = await response.text();
                        console.error('API error response:', response.status, errorText);
                        throw new Error(`API request failed: ${response.status} - ${errorText}`);
                    }
                } catch (error) {
                    console.error('Error loading image from Unsplash:', error);
                    
                    // Show user-friendly error message
                    let errorMessage = 'Failed to load image from Unsplash. ';
                    
                    if (error.message.includes('API request failed')) {
                        errorMessage += 'The image service is currently unavailable. Please try again later.';
                    } else if (error.message.includes('NetworkError') || error.message.includes('fetch')) {
                        errorMessage += 'Please check your internet connection and try again.';
                    } else {
                        errorMessage += 'Please try again or contact support if the problem persists.';
                    }
                    
                    alert(errorMessage);
                } finally {
                    // Always re-enable the button
                    loadImageBtn.disabled = false;
                    loadImageBtn.innerHTML = '<i class="fas fa-image me-1"></i> Load Image';
                    refreshImageBtn.disabled = false;
                }
            }

            // Load image button
            loadImageBtn.addEventListener('click', getUnsplashImage);
            
            // Refresh image button
            refreshImageBtn.addEventListener('click', getUnsplashImage);
        });
    </script>
} 