@page "{id:int}"
@model WebApp.Pages.Trips.EditModel
@{
    ViewData["Title"] = "Edit Trip";
}

<style>
    /* Dark theme dropdown styling */
    .form-select {
        background-color: rgba(255, 255, 255, 0.1) !important;
        border: 1px solid rgba(255, 255, 255, 0.2) !important;
        color: #ecf0f1 !important;
    }
    
    .form-select:focus {
        background-color: rgba(255, 255, 255, 0.15) !important;
        border-color: #3498db !important;
        box-shadow: 0 0 0 0.2rem rgba(52, 152, 219, 0.25) !important;
        color: #ecf0f1 !important;
    }
    
    /* Dropdown options styling */
    .form-select option {
        background-color: #2c3e50 !important;
        color: #ecf0f1 !important;
        padding: 8px 12px !important;
    }
    
    .form-select option:hover,
    .form-select option:focus,
    .form-select option:checked {
        background-color: #3498db !important;
        color: #ffffff !important;
    }
    
    /* Additional browser compatibility */
    select.form-select {
        -webkit-appearance: none !important;
        -moz-appearance: none !important;
        appearance: none !important;
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%23ecf0f1' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e") !important;
        background-position: right 0.75rem center !important;
        background-repeat: no-repeat !important;
        background-size: 16px 12px !important;
        padding-right: 2.5rem !important;
    }
</style>

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb" style="background: rgba(255, 255, 255, 0.05); border-radius: 12px;">
                    <li class="breadcrumb-item"><a asp-page="/Index" style="color: #3498db;">Home</a></li>
                    <li class="breadcrumb-item"><a asp-page="./Index" style="color: #3498db;">Trips</a></li>
                    <li class="breadcrumb-item"><a asp-page="./Details" asp-route-id="@Model.Trip.Id" style="color: #3498db;">@Model.Trip.Title</a></li>
                    <li class="breadcrumb-item active" aria-current="page" style="color: #ecf0f1;">Edit</li>
                </ol>
            </nav>

            <div class="dark-theme-form-container">
                <div class="dark-theme-form-header">
                    <h2><i class="fas fa-edit me-2"></i>@ViewData["Title"]</h2>
                </div>
                
                @if (!string.IsNullOrEmpty(TempData["ErrorMessage"]?.ToString()))
                {
                    <div class="alert alert-danger dark-theme-alert mb-4" role="alert">
                        <i class="fas fa-exclamation-triangle me-2"></i>@TempData["ErrorMessage"]
                    </div>
                }

                <form method="post" class="needs-validation dark-theme-form" novalidate>
                    <input type="hidden" asp-for="Trip.Id" />
                    
                    <div class="row g-3">
                        <!-- Trip Title -->
                        <div class="col-md-12">
                            <label asp-for="Trip.Title" class="form-label">
                                <i class="fas fa-tag me-1"></i>Trip Title
                            </label>
                            <input asp-for="Trip.Title" class="form-control" required id="tripTitle" 
                                   placeholder="Enter a catchy trip title..." />
                            <span asp-validation-for="Trip.Title" class="text-danger"></span>
                        </div>

                        <!-- Description -->
                        <div class="col-md-12">
                            <label asp-for="Trip.Description" class="form-label">
                                <i class="fas fa-align-left me-1"></i>Description
                            </label>
                            <textarea asp-for="Trip.Description" class="form-control" rows="4" required
                                      placeholder="Describe what makes this trip special..."></textarea>
                            <span asp-validation-for="Trip.Description" class="text-danger"></span>
                            <div class="form-text" style="color: #95a5a6;">
                                Provide a detailed description of the trip activities, highlights, and experiences.
                            </div>
                        </div>

                        <!-- Destination -->
                        <div class="col-md-12">
                            <label asp-for="Trip.DestinationId" class="form-label">
                                <i class="fas fa-map-marker-alt me-1"></i>Destination
                            </label>
                            <select asp-for="Trip.DestinationId" asp-items="Model.Destinations" class="form-select" required>
                                <option value="">-- Select a destination --</option>
                            </select>
                            <span asp-validation-for="Trip.DestinationId" class="text-danger"></span>
                        </div>

                        <!-- Start and End Dates -->
                        <div class="col-md-6">
                            <label asp-for="Trip.StartDate" class="form-label">
                                <i class="fas fa-calendar-alt me-1"></i>Start Date
                            </label>
                            <input asp-for="Trip.StartDate" class="form-control" type="date" required />
                            <span asp-validation-for="Trip.StartDate" class="text-danger"></span>
                        </div>

                        <div class="col-md-6">
                            <label asp-for="Trip.EndDate" class="form-label">
                                <i class="fas fa-calendar-check me-1"></i>End Date
                            </label>
                            <input asp-for="Trip.EndDate" class="form-control" type="date" required />
                            <span asp-validation-for="Trip.EndDate" class="text-danger"></span>
                        </div>

                        <!-- Price and Capacity -->
                        <div class="col-md-6">
                            <label asp-for="Trip.Price" class="form-label">
                                <i class="fas fa-dollar-sign me-1"></i>Price (USD)
                            </label>
                            <input asp-for="Trip.Price" class="form-control" type="number" step="0.01" min="0.01" required
                                   placeholder="0.00" />
                            <span asp-validation-for="Trip.Price" class="text-danger"></span>
                        </div>

                        <div class="col-md-6">
                            <label asp-for="Trip.Capacity" class="form-label">
                                <i class="fas fa-users me-1"></i>Maximum Participants
                            </label>
                            <input asp-for="Trip.Capacity" class="form-control" type="number" min="1" max="500" required
                                   placeholder="10" />
                            <span asp-validation-for="Trip.Capacity" class="text-danger"></span>
                        </div>

                        <!-- Trip Image -->
                        <div class="col-md-12">
                            <label class="form-label">
                                <i class="fas fa-image me-1"></i>Trip Image
                            </label>
                            <input type="hidden" asp-for="Trip.ImageUrl" id="imageUrlInput" />
                            <div class="row">
                                <div class="col-md-8">
                                    <div class="image-preview-container mb-2" style="height: 200px; overflow: hidden; background: rgba(255, 255, 255, 0.05); border: 1px solid rgba(255, 255, 255, 0.1); border-radius: 12px; display: flex; align-items: center; justify-content: center;">
                                        @if (!string.IsNullOrEmpty(Model.Trip.ImageUrl))
                                        {
                                            <img id="imagePreview" src="@Model.Trip.ImageUrl" alt="Trip Image Preview" style="max-width: 100%; max-height: 200px; border-radius: 12px;">
                                            <div id="noImagePlaceholder" style="text-align: center; display: none;">
                                                <i class="fas fa-image text-muted" style="font-size: 3rem; color: #95a5a6;"></i>
                                                <p class="text-muted mb-0" style="color: #95a5a6;">No image selected</p>
                                            </div>
                                        }
                                        else
                                        {
                                            <img id="imagePreview" src="" alt="Trip Image Preview" style="max-width: 100%; max-height: 200px; display: none; border-radius: 12px;">
                                            <div id="noImagePlaceholder" style="text-align: center;">
                                                <i class="fas fa-image text-muted" style="font-size: 3rem; color: #95a5a6;"></i>
                                                <p class="text-muted mb-0" style="color: #95a5a6;">No image selected</p>
                                            </div>
                                        }
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <button type="button" id="loadImageBtn" class="btn btn-outline-primary mb-2 w-100" 
                                            style="border-color: #3498db; color: #3498db;">
                                        <i class="fas fa-image me-1"></i> Load New Image
                                    </button>
                                    <button type="button" id="refreshImageBtn" class="btn btn-outline-secondary mb-2 w-100" disabled
                                            style="border-color: #95a5a6; color: #95a5a6;">
                                        <i class="fas fa-sync-alt me-1"></i> Try Another
                                    </button>
                                    <div class="form-text" style="color: #95a5a6; font-size: 0.8rem;">
                                        Images are automatically fetched based on the trip details.
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Form Actions -->
                    <div class="d-flex justify-content-between mt-4 pt-3" style="border-top: 1px solid rgba(255, 255, 255, 0.1);">
                        <a asp-page="./Details" asp-route-id="@Model.Trip.Id" class="btn btn-secondary">
                            <i class="fas fa-arrow-left me-2"></i>Cancel
                        </a>
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-save me-2"></i>Update Trip
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        // Enable Bootstrap form validation
        (function () {
            'use strict'
            var forms = document.querySelectorAll('.needs-validation')
            Array.prototype.slice.call(forms).forEach(function (form) {
                form.addEventListener('submit', function (event) {
                    if (!form.checkValidity()) {
                        event.preventDefault()
                        event.stopPropagation()
                    }
                    form.classList.add('was-validated')
                }, false)
            })
        })()

        // Image handling with Unsplash
        document.addEventListener('DOMContentLoaded', function () {
            const loadImageBtn = document.getElementById('loadImageBtn');
            const refreshImageBtn = document.getElementById('refreshImageBtn');
            const imagePreview = document.getElementById('imagePreview');
            const imageUrlInput = document.getElementById('imageUrlInput');
            const noImagePlaceholder = document.getElementById('noImagePlaceholder');
            const titleInput = document.getElementById('tripTitle');
            const destinationSelect = document.querySelector('select[name="Trip.DestinationId"]');

            // Check if we have an existing image and enable refresh button
            if (imageUrlInput.value) {
                refreshImageBtn.disabled = false;
            }

            // Function to get image from Unsplash
            async function getUnsplashImage() {
                try {
                    loadImageBtn.disabled = true;
                    loadImageBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i> Loading...';
                    refreshImageBtn.disabled = true;
                    
                    // Get query from inputs
                    const title = titleInput.value.trim();
                    const destinationText = destinationSelect.options[destinationSelect.selectedIndex]?.text || '';
                    
                    if (!title && !destinationText) {
                        alert("Please enter a trip title or select a destination first.");
                        loadImageBtn.disabled = false;
                        loadImageBtn.innerHTML = '<i class="fas fa-image me-1"></i> Load New Image';
                        return;
                    }
                    
                    const query = `${title} ${destinationText} travel trip`.trim();
                    console.log(`Fetching image for query: ${query}`);
                    
                    // Create direct call to Unsplash service
                    try {
                        // First try the API endpoint
                        const response = await fetch(`/api/unsplash/random?query=${encodeURIComponent(query)}&t=${Date.now()}`);
                        console.log('API Response status:', response.status);
                        
                        if (response.ok) {
                            const data = await response.json();
                            console.log('API Response data:', data);
                            
                            if (data && data.imageUrl) {
                                // Success! Display the image
                                imagePreview.src = data.imageUrl;
                                imagePreview.style.display = 'block';
                                imageUrlInput.value = data.imageUrl;
                                noImagePlaceholder.style.display = 'none';
                                refreshImageBtn.disabled = false;
                                return;
                            }
                        } else {
                            const errorText = await response.text();
                            console.error('API error response:', errorText);
                        }
                        
                        // If API fails, fallback to direct URL which always works
                        console.log('Falling back to direct Unsplash URL');
                        const timestamp = Date.now();
                        const fallbackUrl = `https://source.unsplash.com/random/800x600/?${encodeURIComponent(query)}&t=${timestamp}`;
                        
                        // Display the fallback image
                        imagePreview.src = fallbackUrl;
                        imagePreview.style.display = 'block';
                        imageUrlInput.value = fallbackUrl;
                        noImagePlaceholder.style.display = 'none';
                        refreshImageBtn.disabled = false;
                    } catch (fetchError) {
                        console.error('Fetch error:', fetchError);
                        // Last resort fallback
                        const fallbackUrl = `https://source.unsplash.com/random/800x600/?${encodeURIComponent(query)}`;
                        imagePreview.src = fallbackUrl;
                        imagePreview.style.display = 'block';
                        imageUrlInput.value = fallbackUrl;
                        noImagePlaceholder.style.display = 'none';
                        refreshImageBtn.disabled = false;
                    }
                } catch (error) {
                    console.error('Error in getUnsplashImage:', error);
                    alert('Failed to load image. Please try again.');
                } finally {
                    loadImageBtn.disabled = false;
                    loadImageBtn.innerHTML = '<i class="fas fa-image me-1"></i> Load New Image';
                }
            }

            // Load image button
            loadImageBtn.addEventListener('click', getUnsplashImage);
            
            // Refresh image button
            refreshImageBtn.addEventListener('click', getUnsplashImage);
        });
    </script>
} 