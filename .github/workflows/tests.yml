name: 🧪 Run Tests

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

jobs:
  test:
    name: 🔬 Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        dotnet-version: [ '8.0.x' ]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🛠️ Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}
        
    - name: 📦 Restore dependencies
      run: dotnet restore TravelOrganizationSystem/
      
    - name: 🏗️ Build projects
      run: dotnet build TravelOrganizationSystem/ --no-restore --configuration Release
      
    - name: 🧪 Run Unit Tests - WebAPI
      run: |
        echo "🚀 Running WebAPI Tests..."
        dotnet test TravelOrganizationSystem/WebAPI.Tests/ \
          --no-build \
          --configuration Release \
          --verbosity normal \
          --logger "console;verbosity=detailed" \
          --logger "trx;LogFileName=webapi-results.trx" \
          --collect:"XPlat Code Coverage" \
          -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura
          
    - name: 🧪 Run Unit Tests - WebApp
      run: |
        echo "🚀 Running WebApp Tests..."
        dotnet test TravelOrganizationSystem/WebApp.Tests/ \
          --no-build \
          --configuration Release \
          --verbosity normal \
          --logger "console;verbosity=detailed" \
          --logger "trx;LogFileName=webapp-results.trx" \
          --collect:"XPlat Code Coverage" \
          -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura
          
    - name: 🧪 Run Integration Tests
      run: |
        echo "🚀 Running Integration Tests..."
        dotnet test TravelOrganizationSystem/Integration.Tests/ \
          --no-build \
          --configuration Release \
          --verbosity normal \
          --logger "console;verbosity=detailed" \
          --logger "trx;LogFileName=integration-results.trx" \
          --collect:"XPlat Code Coverage" \
          -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura
          
    - name: 📊 Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.dotnet-version }}
        path: |
          TravelOrganizationSystem/**/TestResults/**/*.trx
          TravelOrganizationSystem/**/TestResults/**/*.xml
          
    - name: 📈 Upload Coverage Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-reports-${{ matrix.dotnet-version }}
        path: |
          TravelOrganizationSystem/**/TestResults/**/*.cobertura.xml
          
    - name: 📝 Test Summary
      if: always()
      run: |
        echo "## 🧪 Test Execution Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Test Results" >> $GITHUB_STEP_SUMMARY
        echo "- **WebAPI Tests**: Check detailed logs above" >> $GITHUB_STEP_SUMMARY
        echo "- **WebApp Tests**: Check detailed logs above" >> $GITHUB_STEP_SUMMARY
        echo "- **Integration Tests**: Check detailed logs above" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔍 Coverage Reports" >> $GITHUB_STEP_SUMMARY
        echo "Coverage reports have been uploaded as artifacts." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🏗️ Build Configuration" >> $GITHUB_STEP_SUMMARY
        echo "- **.NET Version**: ${{ matrix.dotnet-version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **OS**: ubuntu-latest" >> $GITHUB_STEP_SUMMARY
        echo "- **Configuration**: Release" >> $GITHUB_STEP_SUMMARY

  notify:
    name: 📢 Notify Results
    runs-on: ubuntu-latest
    needs: test
    if: always()
    
    steps:
    - name: 📊 Job Status Check
      run: |
        if [ "${{ needs.test.result }}" == "success" ]; then
          echo "✅ All tests passed successfully!"
          echo "TESTS_STATUS=✅ PASSED" >> $GITHUB_ENV
        else
          echo "❌ Some tests failed!"
          echo "TESTS_STATUS=❌ FAILED" >> $GITHUB_ENV
        fi
        
    - name: 📝 Final Summary
      run: |
        echo "## 🎯 Final Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Status**: ${{ env.TESTS_STATUS }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 Next Steps" >> $GITHUB_STEP_SUMMARY
        if [ "${{ needs.test.result }}" == "success" ]; then
          echo "- ✅ All tests are passing" >> $GITHUB_STEP_SUMMARY
          echo "- 🚀 Ready for deployment" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ❌ Fix failing tests" >> $GITHUB_STEP_SUMMARY
          echo "- 🔍 Check detailed logs above" >> $GITHUB_STEP_SUMMARY
          echo "- 🔧 Review test artifacts" >> $GITHUB_STEP_SUMMARY
        fi